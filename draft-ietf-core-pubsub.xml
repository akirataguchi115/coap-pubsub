<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-03" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2018"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server or a client.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>This document specifies the means for nodes with limited reachability to
communicate using simple extensions to CoAP. The extensions enable publish-subscribe
communication using a broker node that enables store-and-forward messaging
between two or more nodes. Furthermore the extensions facilitate many-to-many
communication using CoAP.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words ‘MUST’, ‘MUST NOT’, ‘REQUIRED’, ‘SHALL’, ‘SHALL NOT’,
‘SHOULD’, ‘SHOULD NOT’, ‘RECOMMENDED’, ‘MAY’, and ‘OPTIONAL’ in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST interfaces defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pub/sub):'>
  A messaging paradigm where messages are published to a broker and potential
receivers can subscribe to the broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a broker and publications are delivered
by the broker to subscribed receivers.</t>
  <t hangText='CoAP pub/sub service:'>
  A group of REST resources, as defined in this document, which together implement the required features of this specification.</t>
  <t hangText='CoAP pub/sub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pub/sub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A broker uses the topics to match subscriptions to publications. A topic
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP Pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact
with a CoAP pub/sub Broker through the CoAP pub/sub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pub/sub Broker performs a store-and-forward of state update representations
between certain CoAP pub/sub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pub/sub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pub/sub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP Pub/sub Broker">

<t>A CoAP pub/sub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the broker only needs to be
reachable from all clients. The broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP Pub/sub Client">

<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub
REST API defined in this document. Clients initiate interactions with a CoAP pub/sub broker. A data source
(e.g., sensor clients) can publish state updates to the broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP Pub/sub Topic">

<t>The clients and broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“EP-33543/sen/3303/0/5700”.  The topics are hosted at the broker and
all the clients using the broker share the same namespace for
topics. Every CoAP pub/sub topic has a link, consisting of a reference
path on the broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations with a content-format specified in the link. A
CoAP pub/sub topic value may alternatively be a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format.</t>

</section>
<section anchor="brokerless-pubsub" title="Brokerless Pub/sub">

<t><xref target="brokerless"/> shows an arrangement for using CoAP pub/sub in a
“brokerless” configuration between peer nodes. Nodes in a brokerless
system may act as both broker and client. The Broker interface in a
brokerless node may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pub/sub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pub/sub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="function-set" title="CoAP Pub/sub REST API">

<t>This section defines the REST API exposed by a CoAP pub/sub Broker to pub/sub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations
MAY support a subset of the operations as required by particular constrained
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pub/sub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pub/sub broker MAY register its pub/sub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pub/sub API using CoAP Simple Discovery. A broker wishing to
advertise the CoAP pub/sub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A broker MAY
advertise its supported content formats and other attributes in the
link to its pub/sub API.</t>

<t>A CoAP pub/sub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pub/sub broker wishing to advertize topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pub/sub Broker MAY expose the Discover interface through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pub/sub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>The DISCOVER interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the broker resource. A pub/sub
broker SHOULD use the value “/ps/” for the base URI of the pub/sub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pub/sub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="create" title="CREATE">

<t>A CoAP pubsub broker SHOULD allow Clients to create new topics on the
broker using CREATE. Some exceptions are for fixed brokerless devices
and pre-configured brokers in dedicated installations. A client wishing
to create a topic MUST use CoAP POST to the pubsub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. The client MAY indicate the lifetime of
the topic by including the Max-Age option in the CREATE request.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created. Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>Topics may be created as sub-topics of other topics. A client MAY
create a topic with a ct (Content Format) link attribute value which
describes a supported serialization of the CoRE link format
<xref target="RFC6690"/> such as application/link-format (ct=40) or its JSON or
CBOR serializations.  If a topic is created which describes a link
serialization, that topic may then have sub-topics created under it as
shown in <xref target="create-sub-fig"/>.</t>

<t>The CREATE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" -------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE sub-topic" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------- POST /ps/ "<mainTopic>;ct=40" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |             Location: /ps/mainTopic/          |
  |                                               |
  | --- POST /ps/mainTopic/ "<subTopic>;ct=50" -->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |        Location: /ps/mainTopic/subTopic       |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="publish" title="PUBLISH">

<t>A CoAP pub/sub broker MAY allow clients to PUBLISH to topics on
the broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pub/sub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format of the payload of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
broker accepts PUBLISH using POST it shall respond with the 2.04 Changed
status code.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSRCIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>. If a client
publishes to a broker with the Max-Age option, the broker MUST include
the same value for the Max-Age option in all notifications. A broker
MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pub/sub broker MAY allow Clients to subscribe to topics on the Broker
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pub/sub Client wishing
to Subscribe to a topic on a broker MUST use a CoAP GET with the Observe
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the broker can supply the requested content format. The broker
MUST reject Subscribe requests on a topic if the content format of the request
is not supported by the content format the topic was created with. The broker
MAY accept Subscribe requests which specify content formats that the broker
can supply as alternate content formats to the content format the topic was
registered with. If the topic was published with the Max-Age option, the
broker MUST set the Max-Age option in the valid response to the amount of
time remaining for the value to be valid since the last publish operation
on that topic. The Broker MUST return a response code of “2.07 No Content”
if the Max-Age of the previously stored value has expired. The Broker MUST
return a response code “4.04 Not Found” if the topic does not exist or has
been removed. The Broker MUST return a response code “4.15 Unsupported Content
Format” if it can not return the requested content format. If a Broker is
unable to accept a new Subscription on a topic, it SHOULD return the
appropriate
response code without the Observe option as per as per <xref target="RFC7641"/>
Section 4.1. There is no explicit maximum lifetime of a Subscription,
thus
a Broker may remove subscribers at any time. The Broker, upon removing a
Subscriber, will transmit the appropriate response code without the Observe
option, as per <xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful subscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the broker, with a subsequent
notification. The subscribe response from the broker uses the last
stored value associated with the topic1. The notification from the
broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pub/sub broker allows clients to SUBSCRIBE to topics on the broker, it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pub/sub broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the topic was created with.
The broker MAY accept Read requests which specify content formats that the
broker can supply as alternate content formats to the content format the
topic was registered with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the broker can supply the requested content format. If
the topic was published with the Max-Age option, the broker MUST set the
Max-Age option in the valid response to the amount of time remaining for
the topic to be valid since the last publish. The Broker MUST return a response
code of “2.07 No Content” if the Max-Age of the previously stored value has
expired. The Broker MUST return a response code “4.04 Not Found” if the topic
does not exist or has been removed. The Broker MUST return a response code
“4.15 Unsupported Content Format” if the broker can not return the requested
content format.</t>

<t>The READ interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Topic exists, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pub/sub broker MAY allow clientsremove a topics from the broker
using the CoAP Delete
method on the URI of the topic. The CoAP pub/sub Broker MUST return
“2.02 Deleted” if the removal is successful. The broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed. When a topic is removed for
any reason, the Broker SHOULD return the response code 4.04 Not Found
and remove all of the observers from the list of observers as per as
per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP Pub/sub Operation with Resource Directory">

<t>A CoAP pub/sub Broker may register the base URI, which is the REST API entry point for a pub/sub service, with a Resource
Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.</t>

<t>A CoAP pub/sub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pub/sub topics. A pub/sub
Client may use an RD to discover pub/sub Topics. A client which
registers pub/sub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pub/sub Broker.</t>

<t>A CoAP pub/sub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pub/sub broker. See
<xref target="discover"/> in this document.</t>

<t>The pub/sub broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pub/sub broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the broker, allowing the broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the broker is unable to serve a certain client that is sending
publish messages too fast, the broker MUST respond with Response Code
4.29, “Too Many Requests”. This Response Code is like HTTP 429 “Too
Many Requests” but uses the Max-Age Option in place of the
“Retry-After” header field to indicate the number of seconds after
which to retry. The broker MAY stop creating notifications from the
publish messages from this client and to this topic for the indicated
time.</t>

<t>If a client receives the 4.29 Response Code from the broker for a
publish message to a topic, it MUST NOT send new publish messages to
the broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pub/sub broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since brokers terminate the exchange. While running
separate DTLS sessions from the client device to the broker and from
broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pub/sub broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.
When only end-to-end encryption is necessary and the CoAP Broker is
trusted, Payload Only Protection (Mode:PAYL) could be used. The
Publisher would wrap only the payload before sending it to the broker
and set the option Content-Format to application/smpayl. Upon
receival, the Broker can read the unencrypted CoAP header to forward
it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters
Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="function-set"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="function-set"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="response-code-value-207" title="Response Code value ‘2.07’">

<t><list style="symbols">
  <t>Response Code: 2.07</t>
  <t>Description: Add No Content response to GET to the existing definition of
the 2.07 response code.</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: The server sends this code to the client to indicate that the request was valid and accepted, but the responce may contain an empty payload. It is comparable to and may be proxied with the http 204 No Content status code.</t>
</list></t>

</section>
<section anchor="response-code-value-429" title="Response Code value ‘4.29’">

<t><list style="symbols">
  <t>Response Code: 4.29</t>
  <t>Description: This error code is used by a server to indicate that a client
is making too many requests on a resource.</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='https://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.selander-ace-object-security">
<front>
<title>Object Security of CoAP (OSCOAP)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='October' day='11' year='2016' />

<abstract><t>This memo defines Object Security of CoAP (OSCOAP), a method for application layer protection of message exchanges with the Constrained Application Protocol (CoAP), using the CBOR Object Signing and Encryption (COSE) format.  OSCOAP provides end-to-end encryption, integrity and replay protection to CoAP payload, options, and header fields, as well as a secure binding between CoAP request and response messages.  The use of OSCOAP is signaled with the CoAP option Object-Security, also defined in this memo.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-selander-ace-object-security-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-selander-ace-object-security-06.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='September' day='28' year='2017' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-01.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter Van der Stok'>
    <organization />
</author>

<author initials='C' surname='Amsuess' fullname='Christian Amsuess'>
    <organization />
</author>

<date month='October' day='30' year='2017' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which hosts descriptions of resources held on other servers, allowing lookups to be performed for those resources.  This document specifies the web interfaces that a Resource Directory supports in order for web servers to discover the RD and to register, maintain, lookup and remove resource descriptions.  Furthermore, new link attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-12.txt' />
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAL8BgloAA+19+3YbR3L3//0Ufag/JMUASEryjbt2QpF0lhuJZEhqN5t8
OTkDoAHOcjCDnR6IgmXlffIcebHUrW8zA5K6fJadmMfHIoGZ7urq6qpfVVdX
D4dDZZusnP5HVlSl2dNNvTIqX9b0m22e7Ox8u/NETatJmS3g62mdzZphbprZ
cFLVBv6XLYfL1diuxsOdp2qSNXvaNlO1zPeU1k012dMP18Y+5D+qxTKbNMlH
U7NsruCTp/J3Xk5NGT1i14vazGz0QVU36SfQ7ALeiT7JyyLHwfh3mjqnfstK
XhA6+G8gPv2oyZsCXj9bjYvcXg0vYHyTOh8b/byurk2tZ1WtmyujD6oSms6g
r6neXy6LHMafV6U+qyscbaEfHVT7Z49VNh7X5vUdDeKj6vpmTx+XjalL0wwP
kdlqmjVAy5Od3W9UtmquqnpPDWGEMNyXI/1P8F9l4XkYBs/Qy3xylZkifFzV
8z19scjq5vIqL+cWPjKLLC/8oyN+9B8sPtPQMyPgh+tln3sxdVaa0nezX+fR
Z9THETDZ2qoMHWR1Prrmh/7ByLdx038c0X/54r//qzQ/+rb/mOULE3+8ofm/
4nOjv8L/4LG0g7KqFzAXrw2K4fkPB0+//eYr+fXJ7u638utXX32743798mv3
69dfPdt1vz758smeystZ3Nzx8HBkTQGLxtTDbGKG1fivZtIMrZms6rxZu2eW
sKQW47zM6aF4pSzrapYXvrGwnGpjq1UNT0/zGpqs6rUQ8uW333yzp9RwONTZ
GGVu0ih1eX8RHGggV9dAdQMPmjeNKS08ZmGKDMwF/Dk1U9VUsBaWS1hhepFN
QBLMsKmG8iuts1XpOshLWJsgNwurb64MtALqAyZKL2AcwP6p4bbdiOBtT+gA
X16CsOWTVZGx9BfVjV5WN7AWbmDohbFWW6CxqhWshJuqvrYjDfJrNaiiFS53
PTUzaAx60UtZVtYvq3G6rGCxZo2iUU8trdxJtszGeZE3ObRQzfgpfFzGD4tA
8yBu8uYKqIO/YQ1n1xZoVzCWEqYnfw2zjYzdhhdXy2GD4siTtMin08Io9QBX
c11NVxNi2tsHefTnu/eaQv32rUjku3eOTKvunKdsUlfATMdFHGw0FWpqXucT
A8wlDqwsMbQ2f1sZ22zD5C3hWQOTOgWVwvM8KXLUtiAh18Y9CUytlDX1a1Mj
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
3km7e/WyXSvK3arH1NrWg75yLzTXPW7/BoNDEvF/BJ/cr/i/pjvI/Il2Cfi6
BqUoWxRJZQbKrN81A5EQpTfhtOZDCsOLgcfS930XGmA6bZ3P51xin6TuUOxT
nZvXeF7woXVmCu+p6lTV1vo4um+KuQdDYSg5EHSDry9WWKM3r22jokLhEiLt
FAtv2WNXe+HCGBXKg+OZ9vZNYWylWvhYxmj7R+gGOF67q1rBz6czrU448Ozl
2p8QlgDuJpr7FiGhAOhYLpPlLEOuJi9kBEb5tJr7MYXrzZfwAF7hyie3F2h4
icqeCwvciZ97CDLhab4SHGw7wI2CrwbTF3it/PDPeFDV68HWhRwA31/nBAz0
TbaOruqT23vwAAC24q8yCieRBxh9Jd1GlaRNPccL50lE8ynejg7iWk0pdT6n
hbPIAHy70tU0j1f5rHGn5oXpdVW0rl4esNPUuq+LI+5ZAVTboVyQJWeaFQlO
fFclF6hzCRRURyA9gCtjRriMo8W6kgpzfF3cKtlMILmQ48c+zN+6ejROoMqU
a1T6GSTXAkf7H9H+Stqgu4lYuTG0chko3pVcMBdNFAzlRX5tbnL7weOIw2+K
yujxPei6MzK+IzXDux0GfGGfnBfPmEhPFtc3iedTOsWljif0mBLvfSW84euk
YlpF4rnqxg+U8yJVN94+6BzbA5jrN2miy6rIL8NKLNFljJJOUmCdxCjzPkmx
S04N0ilul0nnUk/4tglXSNEtmky1mk0zo91t0nS5OBYUWRVNVhra8IknUnGz
EwyEosK9uTIFQm7OTfcHyRdRBcvkFupltcRFoJw3Shd2XeGBdl7CbvdrRDlK
Ec/wzKjPXpeDP/56XX8bR9ZIziFdr91DQAUY39W4SIu/RCUKvMNzgJtIeOZz
sOnQJ/SWPI3dF7AA9B8uL8/0Mzktqlo1W8arJuRcuo22U79FyNVRWLerrXMw
COvh/gxxp74CucYDl7kppi1UYXS5Wow5OwmkEEYD84pvKXcjOtmWdRpkwUua
YDKkXFD7uu5gejq8lG9yG93GxsrUn2R1Z0T8+WUVptYnWSS3p9D52pSh7VxV
wrttcqLDWyEd7eT0kpcUnnHokYVYJYjSoTIDTPzYzCq5pZHrJJShZrKfM9z9
XGbWcqm8B+hSg1Vq8N7G0oKtc4U03j5w36RftO+sArNLckEfRjeDDbjYaI9L
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
Jw3Nke7XubkhNY6brmMYovofRS+nKA+eAAA=

-->

</rfc>

