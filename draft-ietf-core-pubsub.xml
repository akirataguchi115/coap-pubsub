<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-05" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2018"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe Broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server or a client.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>This document specifies the means for nodes with limited reachability to
communicate using simple extensions to CoAP. The extensions enable publish-subscribe
communication using a Broker node that enables store-and-forward messaging
between two or more nodes. Furthermore the extensions facilitate many-to-many
communication using CoAP.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words ‘MUST’, ‘MUST NOT’, ‘REQUIRED’, ‘SHALL’, ‘SHALL NOT’,
‘SHOULD’, ‘SHOULD NOT’, ‘RECOMMENDED’, ‘MAY’, and ‘OPTIONAL’ in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST API defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pub/sub):'>
  A messaging paradigm where messages are published to a Broker and potential
receivers can subscribe to the Broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a Broker and publications are delivered
by the Broker to subscribed receivers.</t>
  <t hangText='CoAP pub/sub service:'>
  A group of REST resources, as defined in this document, which together
implement the required features of this specification.</t>
  <t hangText='CoAP pub/sub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The Broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pub/sub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A Broker uses the topics to match subscriptions to publications. A topic
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP Pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact
with a CoAP pub/sub Broker through the CoAP pub/sub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pub/sub Broker performs a store-and-forward of state update representations
between certain CoAP pub/sub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pub/sub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pub/sub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP Pub/sub Broker">

<t>A CoAP pub/sub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the Broker only needs to be
reachable from all clients. The Broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP Pub/sub Client">

<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub
REST API defined in this document. Clients initiate interactions with a CoAP pub/sub Broker. A data source
(e.g., sensor clients) can publish state updates to the Broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the Broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP Pub/sub Topic">

<t>The clients and Broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“/EP-33543/sen/3303/0/5700”.  The topics are hosted by a Broker and
all the clients using the Broker share the same namespace for
topics. Every CoAP pub/sub topic has an associated link, consisting of a reference
path on the Broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations and a content-format specified in the link. A
CoAP pub/sub topic value may alternatively consist of a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format. Sub-topics are also topics and
may have their own sub-topics, forming a tree structure of unique paths that
is implemented using URIs. The full URI of a topic includes a schems and authority
for the Broker, for example “coaps://10.0.0.13:5684/EP-33543/sen/3303/0/5700”.</t>

</section>
<section anchor="brokerless-pubsub" title="brokerless Pub/sub">

<t><xref target="brokerless"/> shows an arrangement for using CoAP pub/sub in a
“Brokerless” configuration between peer nodes. Nodes in a Brokerless
system may act as both Broker and client. A node that supports Broker
functionality may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
Broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pub/sub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pub/sub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="sec-rest-api" title="CoAP Pub/sub REST API">

<t>This section defines the REST API exposed by a CoAP pub/sub Broker to pub/sub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations
MAY support a subset of the operations as required by particular constrained
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pub/sub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pub/sub Broker MAY register its pub/sub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pub/sub API using CoAP Simple Discovery. A Broker wishing to
advertise the CoAP pub/sub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A Broker MAY
advertise its supported content formats and other attributes in the
link to its pub/sub API.</t>

<t>A CoAP pub/sub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pub/sub Broker wishing to advertise topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pub/sub Broker MAY provide topic discovery functionality through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pub/sub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>Topics in the broker may be created in hierarchies (see {create}) with
parent topics having sub-topics. For a discovery the broker may choose
to not expose the sub-topics in order to limit amount of topic links
sent in a discovery response. The client can then perform discovery
for the parent topics it wants to discover the sub-topics.</t>

<t>The DISCOVER interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for the DISCOVER operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the Broker resource. A pub/sub
Broker SHOULD use the value “/ps/” for the base URI of the pub/sub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pub/sub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-create" title="CREATE">

<t>A CoAP pub/sub broker SHOULD allow Clients to create new topics on the
broker using CREATE. Some exceptions are for fixed brokerless devices
and pre-configured brokers in dedicated installations. A client wishing
to create a topic MUST use a CoAP POST to the pub/sub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. The client MAY indicate the lifetime of
the topic by including the Max-Age option in the CREATE request.</t>

<t>Topics may be created as sub-topics of other topics. A client MAY
create a topic with a ct (Content Format) link attribute value which
describes a supported serialization of the CoRE link format
<xref target="RFC6690"/> such as application/link-format (ct=40) or its JSON or
CBOR serializations.  If a topic is created which describes a link
serialization, that topic may then have sub-topics created under it as
shown in <xref target="create-sub-fig"/>.</t>

<t>Ony one level in the topic hierarchy may be created as a result of a CREATE
operation, unless create on PUBLISH is supported (see <xref target="sec-publish"/>).
The topic string used in the link target MUST NOT contain the “/” character.</t>

<t>A topic creator MUST include exactly one content format link attribute value (ct)
in the create payload. If the Broker does not support the indicated format for
both publish and subscribe, it MUST reject the operation with an error code of
4.00 “Bad Request”.</t>

<t>There is no default content format. If no ct is specified, the Broker MUST
reject the operation with an error code of 4.00 “Bad Request”.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The Broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created. Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>Topic hierarchies can be created by creating parent topics. A parent
topic is created with a POST using ct (Content Format) link attribute
value which describes a supported serialization of the CoRE link
format <xref target="RFC6690"/>, such as application/link-format (ct=40) or its
JSON or CBOR serializations.  If a topic is created which describes a
link serialization, that topic may then have sub-topics created under
it as shown in <xref target="create-sub-fig"/>.</t>

<t>The CREATE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for the CREATE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE of topic hierarchy" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- POST /ps/ "<parent-topic>;ct=40" ------>|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |            Location: /ps/parent-topic/        |
  |                                               |
  |-- POST /ps/parent-topic/ "<subtopic>;ct=50" ->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |       Location: /ps/parent-topic/subtopic     |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-publish" title="PUBLISH">

<t>A CoAP pub/sub Broker MAY allow clients to PUBLISH to topics on
the Broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pub/sub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The Broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The Broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A Broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format value from the header of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t><xref target="create-publish-fig"/> shows an example of a topic being created on first
PUBLISH.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
Broker accepts PUBLISH using POST it shall respond with the 2.04 Changed
status code. If an attempt is made to PUBLISH using POST to a topic that does
not exist, the Broker SHALL return a response status indicating resource not
found, such as HTTP 404 or CoAP 4.04.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSCRIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>.</t>

<t>If a client publishes to a Broker with the Max-Age option, the Broker MUST
include the same value for the Max-Age option in all notifications.</t>

<t>A Broker MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for the PUBLISH operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a Broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pub/sub Broker MAY allow Clients to subscribe to topics on the Broker
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pub/sub Client wishing
to Subscribe to a topic on a Broker MUST use a CoAP GET with the Observe
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the Broker can supply the requested content format. The Broker
MUST reject Subscribe requests on a topic if the content format of the request
is not the content format the topic was created with.</t>

<t>If the topic was published with the Max-Age option, the
Broker MUST set the Max-Age option in the valid response to the amount of
time remaining for the value to be valid since the last publish operation
on that topic. The Broker MUST return a response code of “2.07 No Content”
if the topic has not yet been published to, or if Max-Age of the previously
stored value has expired. The Broker MUST
return a response code “4.04 Not Found” if the topic does not exist or has
been removed.</t>

<t>The Broker MUST return a response code “4.15 Unsupported Content
Format” if it can not return the requested content format. If a Broker is
unable to accept a new Subscription on a topic, it SHOULD return the
appropriate response code without the Observe option as per <xref target="RFC7641"/>
Section 4.1.</t>

<t>There is no explicit maximum lifetime of a Subscription,
thus a Broker may remove subscribers at any time. The Broker, upon removing a
Subscriber, will transmit the appropriate response code without the Observe
option, as per <xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the SUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful subscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the Broker, with a subsequent
notification. The subscribe response from the Broker uses the last
stored value associated with the topic1. The notification from the
Broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pub/sub Broker allows clients to SUBSCRIBE to topics on the Broker,
it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for the UNSUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pub/sub Broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the
topic was created with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the Broker can supply the requested content format.</t>

<t>If the topic was published with the Max-Age option, the Broker MUST set the
Max-Age option in the valid response to the amount of time remaining for
the topic to be valid since the last publish. The Broker MUST return a response
code of “2.07 No Content” if the Max-Age of the previously stored value has
expired, or if the topic has not yet been published to.</t>

<t>The Broker MUST return a response code “4.04 Not Found” if the topic
does not exist or has been removed. The Broker MUST return a response code
“4.15 Unsupported Content Format” if the Broker can not return the requested
content format.</t>

<t>The READ operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the READ operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Topic exists, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pub/sub Broker MAY allow clients to remove topics from the Broker
using the CoAP Delete
method on the URI of the topic. The CoAP pub/sub Broker MUST return
“2.02 Deleted” if the removal is successful. The Broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed.</t>

<t>When a topic is removed for any reason, the Broker SHOULD remove all of the
observers from the list of observers and return a final 4.04 “Not Found”
response as per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for the REMOVE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP Pub/sub Operation with Resource Directory">

<t>A CoAP pub/sub Broker may register the base URI, which is the REST API entry point for a pub/sub service, with a Resource
Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.</t>

<t>A CoAP pub/sub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pub/sub topics. A pub/sub
Client may use an RD to discover pub/sub Topics. A client which
registers pub/sub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pub/sub Broker.</t>

<t>A CoAP pub/sub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pub/sub Broker. See
<xref target="discover"/> in this document.</t>

<t>The pub/sub Broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pub/sub Broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the Broker, allowing the Broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the Broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the Broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the Broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the Broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the Broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the Broker is unable to serve a certain client that is sending
publish messages too fast, the Broker SHOULD respond with Response
Code 4.29, “Too Many Requests” <xref target="I-D.keranen-core-too-many-reqs"/> and
set the Max-Age Option to indicate the number of seconds after which
the client can retry. The Broker MAY stop creating notifications from
the publish messages from this client and to this topic for the
indicated time.</t>

<t>If a client receives the 4.29 Response Code from the Broker for a
publish message to a topic, it MUST NOT send new publish messages to
the Broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pub/sub Broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the Broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub Broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since Brokers terminate the exchange. While running
separate DTLS sessions from the client device to the Broker and from
Broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
Broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate Broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The Broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pub/sub Broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.
When only end-to-end encryption is necessary and the CoAP Broker is
trusted, Payload Only Protection (Mode:PAYL) could be used. The
Publisher would wrap only the payload before sending it to the Broker
and set the option Content-Format to application/smpayl. Upon
receival, the Broker can read the unencrypted CoAP header to forward
it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="response-code-value-207" title="Response Code value ‘2.07’">

<t><list style="symbols">
  <t>Response Code: 2.07</t>
  <t>Description: No Content</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: The server sends this code to the client to indicate that the request was valid and accepted, but the response may contain an empty payload. It is comparable to and may be proxied with the HTTP 204 No Content status code.</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='https://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor="I-D.keranen-core-too-many-reqs">
<front>
<title>Too Many Requests Response Code for the Constrained Application Protocol</title>

<author initials='A' surname='Keranen' fullname='Ari Keranen'>
    <organization />
</author>

<date month='March' day='19' year='2018' />

<abstract><t>A Constrained Application Protocol (CoAP) server can experience temporary overload because one or more clients are sending requests to the server at a higher rate than the server is capable or willing to handle.  This document defines a new CoAP Response Code for a server to indicate that a client should reduce the rate of requests.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-keranen-core-too-many-reqs-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-keranen-core-too-many-reqs-01.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-core-object-security">
<front>
<title>Object Security for Constrained RESTful Environments (OSCORE)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE).  OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-object-security-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-object-security-13.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-03.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter Van der Stok'>
    <organization />
</author>

<author initials='C' surname='Amsuess' fullname='Christian Amsuess'>
    <organization />
</author>

<date month='July' day='2' year='2018' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which hosts descriptions of resources held on other servers, allowing lookups to be performed for those resources.  This document specifies the web interfaces that a Resource Directory supports in order for web servers to discover the RD and to register, maintain, lookup and remove resource descriptions.  Furthermore, new link attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-14.txt' />
<format type='PDF'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-14.pdf' />
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAB62OlsAA+1963YbR5Lm/3yKPNQPiWMAJHXxhd32DC3S0+rRhUNS3eOd
nbMngUqA1SxUwVUFUrSseZ99jn2xjVveqgq8SF7LfbbVfboJoCozMjIy4ovI
yMjxeKya1pTZ/zJFVdp93dZrq/JVTX817ePd3W92H6usmpVmCT9ntZm349y2
8/Gsqi38j1mNV+tps56Od5+pmWn3ddNmapXvK63baravH17b5iF/qJYrM2uT
rzK7as/hmyfyOS8zW0aPNNfL2s6b6IuqbtNvoNklvBN9k5dFjoPx77R1Tv2W
lbwgdPBnID79qs3bAl4/Xk+LvDkfn8L4ZnU+tfr7urqwtZ5XtW7PrX5eldC0
gb4yfbBaFTmMP69KfVxXONpCP3peHRxvKzOd1vbylgbxUXVxta9flK2tS9uO
D5HZKjMt0PJ4d+9rZdbteVXvqzGMEIb7aqL/Df5bNfA8DINn6FU+Oze2CF9X
9WJfny5N3Z6d5+Wiga/s0uSFf3TCj/5Lg8+09MwE+OF6OeBebG1KW/puDuo8
+o76OAImN01Vhg5MnU8u+KF/sfJr3PSfJ/TffPl//ndpf/Zt/9nkSxt/vaH5
v+Fzk7/B/8BjaQdlVS9hLi4tiuHJD8+ffPP1l/Ln4729b+TPL7/8Ztf9+ewr
9+dXXz7dc38+fvYY/3wxPnQDYblvq2q8NOX1uLY/NftK5eU87hGfD4ukmv7N
ztpxY2frOm+v3QMrWHLLaV7mYzNLV9KqruZ5MdBSbZtqXcPTWV5Dk1V9LYQ+
++brr4GM8XiszRRlctYqdXZ3ER1p0AG6tgUIW6btu9aWDTzWwBRamCv4mNlM
tRWsldUKVqBemhlICjJiLH/SOlyXroO8hLULcrVs9NW5hVZAvcBE6iWMA6Yn
s9y2GxG87Qkd4csrEMZ8ti4Mr46iutKr6grWyhUMvbBNoxugsaoVrJSrqr5o
Jhrku9GgqtaoDnRm59AY9KJXsuyaTcsOFrNpFY06a2hlz8zKTPMib3NooZrz
U/i4jB8WieZBXOXtOVAHn2GNm4sGaFcwlhKmJ7+E2UbG7sCL69W4RXHlSVrm
WVZYpR7gaq+rbD0jpr1/kEcfP9xrCvX79yKxHz44Mht16zyZWV0BMx0XcbDR
VKjMXuYzC8wlDqwbYigI/do27Q5M3gqetTCpGagcnudZkaM2Bgm5sO5JYGql
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
tA1HYC9ze0UqCTcDpzBE9X8BRuE+MK+hAAA=

-->

</rfc>

