<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-04" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2018"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe Broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server or a client.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>This document specifies the means for nodes with limited reachability to
communicate using simple extensions to CoAP. The extensions enable publish-subscribe
communication using a Broker node that enables store-and-forward messaging
between two or more nodes. Furthermore the extensions facilitate many-to-many
communication using CoAP.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words ‘MUST’, ‘MUST NOT’, ‘REQUIRED’, ‘SHALL’, ‘SHALL NOT’,
‘SHOULD’, ‘SHOULD NOT’, ‘RECOMMENDED’, ‘MAY’, and ‘OPTIONAL’ in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST API defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pub/sub):'>
  A messaging paradigm where messages are published to a Broker and potential
receivers can subscribe to the Broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a Broker and publications are delivered
by the Broker to subscribed receivers.</t>
  <t hangText='CoAP pub/sub service:'>
  A group of REST resources, as defined in this document, which together
implement the required features of this specification.</t>
  <t hangText='CoAP pub/sub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The Broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pub/sub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A Broker uses the topics to match subscriptions to publications. A topic
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP Pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact
with a CoAP pub/sub Broker through the CoAP pub/sub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pub/sub Broker performs a store-and-forward of state update representations
between certain CoAP pub/sub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pub/sub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pub/sub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP Pub/sub Broker">

<t>A CoAP pub/sub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the Broker only needs to be
reachable from all clients. The Broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP Pub/sub Client">

<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub
REST API defined in this document. Clients initiate interactions with a CoAP pub/sub Broker. A data source
(e.g., sensor clients) can publish state updates to the Broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the Broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP Pub/sub Topic">

<t>The clients and Broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“/EP-33543/sen/3303/0/5700”.  The topics are hosted by a Broker and
all the clients using the Broker share the same namespace for
topics. Every CoAP pub/sub topic has an associated link, consisting of a reference
path on the Broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations and a content-format specified in the link. A
CoAP pub/sub topic value may alternatively consist of a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format. Sub-topics are also topics and
may have their own sub-topics, forming a tree structure of unique paths that
is implemented using URIs. The full URI of a topic includes a schems and authority
for the Broker, for example “coaps://10.0.0.13:5684/EP-33543/sen/3303/0/5700”.</t>

</section>
<section anchor="brokerless-pubsub" title="brokerless Pub/sub">

<t><xref target="brokerless"/> shows an arrangement for using CoAP pub/sub in a
“Brokerless” configuration between peer nodes. Nodes in a Brokerless
system may act as both Broker and client. A node that supports Broker
functionality may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
Broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pub/sub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pub/sub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="sec-rest-api" title="CoAP Pub/sub REST API">

<t>This section defines the REST API exposed by a CoAP pub/sub Broker to pub/sub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations
MAY support a subset of the operations as required by particular constrained
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pub/sub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pub/sub Broker MAY register its pub/sub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pub/sub API using CoAP Simple Discovery. A Broker wishing to
advertise the CoAP pub/sub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A Broker MAY
advertise its supported content formats and other attributes in the
link to its pub/sub API.</t>

<t>A CoAP pub/sub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pub/sub Broker wishing to advertise topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pub/sub Broker MAY provide topic discovery functionality through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pub/sub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>The DISCOVER operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for the DISCOVER operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the Broker resource. A pub/sub
Broker SHOULD use the value “/ps/” for the base URI of the pub/sub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pub/sub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-create" title="CREATE">

<t>A CoAP pubsub Broker SHOULD allow Clients to create new topics on the
Broker using CREATE. Some exceptions are for fixed Brokerless devices
and pre-configured Brokers in dedicated installations. A client wishing
to create a topic MUST use CoAP POST to the pubsub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. The client MAY indicate the lifetime of
the topic by including the Max-Age option in the CREATE request.</t>

<t>Topics may be created as sub-topics of other topics. A client MAY
create a topic with a ct (Content Format) link attribute value which
describes a supported serialization of the CoRE link format
<xref target="RFC6690"/> such as application/link-format (ct=40) or its JSON or
CBOR serializations.  If a topic is created which describes a link
serialization, that topic may then have sub-topics created under it as
shown in <xref target="create-sub-fig"/>.</t>

<t>Ony one level in the topic hierarchy may be created as a result of a CREATE
operation, unless create on PUBLISH is supported (see <xref target="sec-publish"/>).
The topic string used in the link target MUST NOT contain the “/” character.</t>

<t>A topic creator MUST include exactly one content format link attribute value (ct)
in the create payload. If the Broker does not support the indicated format for
both publish and subscribe, it MUST reject the operation with an error code of
4.00 “Bad Request”.</t>

<t>There is no default content format. If no ct is specified, the Broker MUST
reject the operation with an error code of 4.00 “Bad Request”.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The Broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created. Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>The CREATE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for the CREATE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE sub-topic" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------- POST /ps/ "<mainTopic>;ct=40" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |             Location: /ps/mainTopic/          |
  |                                               |
  | --- POST /ps/mainTopic/ "<subTopic>;ct=50" -->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |        Location: /ps/mainTopic/subTopic       |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-publish" title="PUBLISH">

<t>A CoAP pub/sub Broker MAY allow clients to PUBLISH to topics on
the Broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pub/sub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The Broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The Broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A Broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format value from the header of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t><xref target="create-publish-fig"/> shows an example of a topic being created on first
PUBLISH.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
Broker accepts PUBLISH using POST it shall respond with the 2.04 Changed
status code. If an attempt is made to PUBLISH using POST to a topic that does
not exist, the Broker SHALL return a response status indicating resource not
found, such as HTTP 404 or CoAP 4.04.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSCRIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>.</t>

<t>If a client publishes to a Broker with the Max-Age option, the Broker MUST
include the same value for the Max-Age option in all notifications.</t>

<t>A Broker MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for the PUBLISH operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a Broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pub/sub Broker MAY allow Clients to subscribe to topics on the Broker
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pub/sub Client wishing
to Subscribe to a topic on a Broker MUST use a CoAP GET with the Observe
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the Broker can supply the requested content format. The Broker
MUST reject Subscribe requests on a topic if the content format of the request
is not the content format the topic was created with.</t>

<t>If the topic was published with the Max-Age option, the
Broker MUST set the Max-Age option in the valid response to the amount of
time remaining for the value to be valid since the last publish operation
on that topic. The Broker MUST return a response code of “2.07 No Content”
if the topic has not yet been published to, or if Max-Age of the previously
stored value has expired. The Broker MUST
return a response code “4.04 Not Found” if the topic does not exist or has
been removed.</t>

<t>The Broker MUST return a response code “4.15 Unsupported Content
Format” if it can not return the requested content format. If a Broker is
unable to accept a new Subscription on a topic, it SHOULD return the
appropriate response code without the Observe option as per <xref target="RFC7641"/>
Section 4.1.</t>

<t>There is no explicit maximum lifetime of a Subscription,
thus a Broker may remove subscribers at any time. The Broker, upon removing a
Subscriber, will transmit the appropriate response code without the Observe
option, as per <xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the SUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful subscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the Broker, with a subsequent
notification. The subscribe response from the Broker uses the last
stored value associated with the topic1. The notification from the
Broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pub/sub Broker allows clients to SUBSCRIBE to topics on the Broker,
it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for the UNSUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pub/sub Broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the
topic was created with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the Broker can supply the requested content format.</t>

<t>If the topic was published with the Max-Age option, the Broker MUST set the
Max-Age option in the valid response to the amount of time remaining for
the topic to be valid since the last publish. The Broker MUST return a response
code of “2.07 No Content” if the Max-Age of the previously stored value has
expired, or if the topic has not yet been published to.</t>

<t>The Broker MUST return a response code “4.04 Not Found” if the topic
does not exist or has been removed. The Broker MUST return a response code
“4.15 Unsupported Content Format” if the Broker can not return the requested
content format.</t>

<t>The READ operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the READ operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Topic exists, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pub/sub Broker MAY allow clients to remove topics from the Broker
using the CoAP Delete
method on the URI of the topic. The CoAP pub/sub Broker MUST return
“2.02 Deleted” if the removal is successful. The Broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed.</t>

<t>When a topic is removed for any reason, the Broker SHOULD remove all of the
observers from the list of observers and return a final 4.04 “Not Found”
response as per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for the REMOVE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP Pub/sub Operation with Resource Directory">

<t>A CoAP pub/sub Broker may register the base URI, which is the REST API entry point for a pub/sub service, with a Resource
Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.</t>

<t>A CoAP pub/sub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pub/sub topics. A pub/sub
Client may use an RD to discover pub/sub Topics. A client which
registers pub/sub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pub/sub Broker.</t>

<t>A CoAP pub/sub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pub/sub Broker. See
<xref target="discover"/> in this document.</t>

<t>The pub/sub Broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pub/sub Broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the Broker, allowing the Broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the Broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the Broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the Broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the Broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the Broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the Broker is unable to serve a certain client that is sending
publish messages too fast, the Broker SHOULD respond with Response
Code 4.29, “Too Many Requests” <xref target="I-D.keranen-core-too-many-reqs"/> and
set the Max-Age Option to indicate the number of seconds after which
the client can retry. The Broker MAY stop creating notifications from
the publish messages from this client and to this topic for the
indicated time.</t>

<t>If a client receives the 4.29 Response Code from the Broker for a
publish message to a topic, it MUST NOT send new publish messages to
the Broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pub/sub Broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the Broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub Broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since Brokers terminate the exchange. While running
separate DTLS sessions from the client device to the Broker and from
Broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
Broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate Broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The Broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pub/sub Broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.
When only end-to-end encryption is necessary and the CoAP Broker is
trusted, Payload Only Protection (Mode:PAYL) could be used. The
Publisher would wrap only the payload before sending it to the Broker
and set the option Content-Format to application/smpayl. Upon
receival, the Broker can read the unencrypted CoAP header to forward
it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="response-code-value-207" title="Response Code value ‘2.07’">

<t><list style="symbols">
  <t>Response Code: 2.07</t>
  <t>Description: No Content</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: The server sends this code to the client to indicate that the request was valid and accepted, but the response may contain an empty payload. It is comparable to and may be proxied with the HTTP 204 No Content status code.</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='https://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor="I-D.keranen-core-too-many-reqs">
<front>
<title>Too Many Requests Response Code for the Constrained Application Protocol</title>

<author initials='A' surname='Keranen' fullname='Ari Keranen'>
    <organization />
</author>

<date month='March' day='19' year='2018' />

<abstract><t>A Constrained Application Protocol (CoAP) server can experience temporary overload because one or more clients are sending requests to the server at a higher rate than the server is capable or willing to handle.  This document defines a new CoAP Response Code for a server to indicate that a client should reduce the rate of requests.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-keranen-core-too-many-reqs-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-keranen-core-too-many-reqs-01.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-core-object-security">
<front>
<title>Object Security for Constrained RESTful Environments (OSCORE)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE).  OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-object-security-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-object-security-13.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-03.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter Van der Stok'>
    <organization />
</author>

<author initials='C' surname='Amsuess' fullname='Christian Amsuess'>
    <organization />
</author>

<date month='July' day='2' year='2018' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which hosts descriptions of resources held on other servers, allowing lookups to be performed for those resources.  This document specifies the web interfaces that a Resource Directory supports in order for web servers to discover the RD and to register, maintain, lookup and remove resource descriptions.  Furthermore, new link attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-14.txt' />
<format type='PDF'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-14.pdf' />
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIABSlOlsAA+19e3cbR3Lv//0p+lB/SIwBkJTkF3fthBbprDZ6MCS1G98k
J6eBaYCzHMzAMwNStKx8n/s57he79erXzIAPybHsk9Xu2SWAme7qqurqX1VX
V4/HY9W0psz+yxRVafd1W6+tylc1/dW0j3d3v959rLJqVpol/JzVZt6Oc9vO
x7OqtvA/ZjVerafNejrefapmpt3XTZupVb6vtG6r2b5+eG2bh/yhWq7MrE2+
yuyqPYdvnsjnvMxsGT3SXC9rO2+iL6q6Tb+BZpfwTvRNXhY5Dsa/09Y59VtW
8oLQwZ+B+PSrNm8LeP14PS3y5nx8CuOb1fnU6u/q6sLWel7Vuj23+llVQtMG
+sr0wWpV5DD+vCr1cV3haAv96Fl1cLytzHRa28tbGsRH1cXVvn5etrYubTs+
RGarzLRAy+Pdva+UWbfnVb2vxjBCGO7Lif4X+G/VwPMwDJbQy3x2bmwRvq7q
xb4+XZq6PTvPy0UDX9mlyQv/6IQf/acGn2npmQnww/VywL3Y2pS29N0c1Hn0
HfVxBExumqoMHZg6n1zwQ/9k5de46T9P6L/58v/939L+5Nv+s8mXNv56Q/N/
w+cmf4P/gcfSDsqqXoIsLi2q4cn3z558/dUX8ufjvb2v5c8vvvh61/35+Zfu
zy+/eLrn/nz8+WP88/n40A2E9b6tqvHSlNfj2v7Y7CuVl/O4R3w+TJJq+jc7
a8eNna3rvL12D6xgyi2neZmPzSydSau6mufFQEu1bap1DU9neQ1NVvW1EPr5
1199BWSMx2NtpqiTs1aps7ur6EiDDdC1LUDZMm3ftrZs4LEGRGhBVvAxs5lq
K5grqxXMQL00M9AUZMRY/qR5uC5dB3kJcxf0atnoq3MLrYB5AUHqJYwDxJNZ
btuNCN72hI7w5RUoYz5bF4ZnR1Fd6VV1BXPlCoZe2KbRDdBY1QpmylVVXzQT
DfrdaDBVazQHOrNzaAx60SuZds2maQeT2bSKRp01NLNnZmWmeZG3ObRQzfkp
fFzGD5NE8yCu8vYcqIPPMMfNRQO0KxhLCeLJL0HayNgdeHG9GreoriykZZ5l
hVXqAc72usrWM2Lauwd59PH9vUSo370TjX3/3pHZqFvlZGZ1Bcx0XMTBRqJQ
mb3MZxaYSxxYN8RQUPq1bdodEN4KnrUg1AxMDst5VuRojUFDLqx7EphaqcbW
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
gb3M7RWZJNwMnMIQ1f8HeqWUmo6eAAA=

-->

</rfc>

