<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-04" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2018"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe Broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server or a client.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>This document specifies the means for nodes with limited reachability to
communicate using simple extensions to CoAP. The extensions enable publish-subscribe
communication using a Broker node that enables store-and-forward messaging
between two or more nodes. Furthermore the extensions facilitate many-to-many
communication using CoAP.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words ‘MUST’, ‘MUST NOT’, ‘REQUIRED’, ‘SHALL’, ‘SHALL NOT’,
‘SHOULD’, ‘SHOULD NOT’, ‘RECOMMENDED’, ‘MAY’, and ‘OPTIONAL’ in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST API defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pub/sub):'>
  A messaging paradigm where messages are published to a Broker and potential
receivers can subscribe to the Broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a Broker and publications are delivered
by the Broker to subscribed receivers.</t>
  <t hangText='CoAP pub/sub service:'>
  A group of REST resources, as defined in this document, which together
implement the required features of this specification.</t>
  <t hangText='CoAP pub/sub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The Broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pub/sub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A Broker uses the topics to match subscriptions to publications. A topic
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP Pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact
with a CoAP pub/sub Broker through the CoAP pub/sub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pub/sub Broker performs a store-and-forward of state update representations
between certain CoAP pub/sub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pub/sub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pub/sub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP Pub/sub Broker">

<t>A CoAP pub/sub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the Broker only needs to be
reachable from all clients. The Broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP Pub/sub Client">

<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub
REST API defined in this document. Clients initiate interactions with a CoAP pub/sub Broker. A data source
(e.g., sensor clients) can publish state updates to the Broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the Broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP Pub/sub Topic">

<t>The clients and Broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“/EP-33543/sen/3303/0/5700”.  The topics are hosted by a Broker and
all the clients using the Broker share the same namespace for
topics. Every CoAP pub/sub topic has an associated link, consisting of a reference
path on the Broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations and a content-format specified in the link. A
CoAP pub/sub topic value may alternatively consist of a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format. Sub-topics are also topics and
may have their own sub-topics, forming a tree structure of unique paths that
is implemented using URIs. The full URI of a topic includes a schems and authority
for the Broker, for example “coaps://10.0.0.13:5684/EP-33543/sen/3303/0/5700”.</t>

</section>
<section anchor="brokerless-pubsub" title="brokerless Pub/sub">

<t><xref target="brokerless"/> shows an arrangement for using CoAP pub/sub in a
“Brokerless” configuration between peer nodes. Nodes in a Brokerless
system may act as both Broker and client. A node that supports Broker
functionality may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
Broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pub/sub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pub/sub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="sec-rest-api" title="CoAP Pub/sub REST API">

<t>This section defines the REST API exposed by a CoAP pub/sub Broker to pub/sub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations
MAY support a subset of the operations as required by particular constrained
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pub/sub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pub/sub Broker MAY register its pub/sub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pub/sub API using CoAP Simple Discovery. A Broker wishing to
advertise the CoAP pub/sub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A Broker MAY
advertise its supported content formats and other attributes in the
link to its pub/sub API.</t>

<t>A CoAP pub/sub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pub/sub Broker wishing to advertise topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pub/sub Broker MAY provide topic discovery functionality through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pub/sub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>The DISCOVER operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for the DISCOVER operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the Broker resource. A pub/sub
Broker SHOULD use the value “/ps/” for the base URI of the pub/sub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pub/sub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-create" title="CREATE">

<t>A CoAP pubsub Broker SHOULD allow Clients to create new topics on the
Broker using CREATE. Some exceptions are for fixed Brokerless devices
and pre-configured Brokers in dedicated installations. A client wishing
to create a topic MUST use CoAP POST to the pubsub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. The client MAY indicate the lifetime of
the topic by including the Max-Age option in the CREATE request.</t>

<t>Topics may be created as sub-topics of other topics. A client MAY
create a topic with a ct (Content Format) link attribute value which
describes a supported serialization of the CoRE link format
<xref target="RFC6690"/> such as application/link-format (ct=40) or its JSON or
CBOR serializations.  If a topic is created which describes a link
serialization, that topic may then have sub-topics created under it as
shown in <xref target="create-sub-fig"/>.</t>

<t>Ony one level in the topic hierarchy may be created as a result of a CREATE
operation, unless create on PUBLISH is supported (see <xref target="sec-publish"/>).
The topic string used in the link target MUST NOT contain the “/” character.</t>

<t>A topic creator MUST include exactly one content format link attribute value (ct)
in the create payload. If the Broker does not support the indicated format for
both publish and subscribe, it MUST reject the operation with an error code of
4.00 “Bad Request”.</t>

<t>There is no default content format. If no ct is specified, the Broker MUST
reject the operation with an error code of 4.00 “Bad Request”.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The Broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created. Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>The CREATE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for the CREATE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE sub-topic" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------- POST /ps/ "<mainTopic>;ct=40" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |             Location: /ps/mainTopic/          |
  |                                               |
  | --- POST /ps/mainTopic/ "<subTopic>;ct=50" -->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |        Location: /ps/mainTopic/subTopic       |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-publish" title="PUBLISH">

<t>A CoAP pub/sub Broker MAY allow clients to PUBLISH to topics on
the Broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pub/sub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The Broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The Broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A Broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format value from the header of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t><xref target="create-publish-fig"/> shows an example of a topic being created on first
PUBLISH.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
Broker accepts PUBLISH using POST it shall respond with the 2.04 Changed
status code. If an attempt is made to PUBLISH using POST to a topic that does
not exist, the Broker SHALL return a response status indicating resource not
found, such as HTTP 404 or CoAP 4.04.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSCRIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>.</t>

<t>If a client publishes to a Broker with the Max-Age option, the Broker MUST
include the same value for the Max-Age option in all notifications.</t>

<t>A Broker MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for the PUBLISH operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a Broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pub/sub Broker MAY allow Clients to subscribe to topics on the Broker
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pub/sub Client wishing
to Subscribe to a topic on a Broker MUST use a CoAP GET with the Observe
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the Broker can supply the requested content format. The Broker
MUST reject Subscribe requests on a topic if the content format of the request
is not the content format the topic was created with.</t>

<t>If the topic was published with the Max-Age option, the
Broker MUST set the Max-Age option in the valid response to the amount of
time remaining for the value to be valid since the last publish operation
on that topic. The Broker MUST return a response code of “2.07 No Content”
if the topic has not yet been published to, or if Max-Age of the previously
stored value has expired. The Broker MUST
return a response code “4.04 Not Found” if the topic does not exist or has
been removed.</t>

<t>The Broker MUST return a response code “4.15 Unsupported Content
Format” if it can not return the requested content format. If a Broker is
unable to accept a new Subscription on a topic, it SHOULD return the
appropriate response code without the Observe option as per <xref target="RFC7641"/>
Section 4.1.</t>

<t>There is no explicit maximum lifetime of a Subscription,
thus a Broker may remove subscribers at any time. The Broker, upon removing a
Subscriber, will transmit the appropriate response code without the Observe
option, as per <xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the SUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful subscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the Broker, with a subsequent
notification. The subscribe response from the Broker uses the last
stored value associated with the topic1. The notification from the
Broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pub/sub Broker allows clients to SUBSCRIBE to topics on the Broker, it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for the UNSUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pub/sub Broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the topic was created with.
The Broker MAY accept Read requests which specify content formats that the
Broker can supply as alternate content formats to the content format the
topic was registered with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the Broker can supply the requested content format.</t>

<t>If the topic was published with the Max-Age option, the Broker MUST set the
Max-Age option in the valid response to the amount of time remaining for
the topic to be valid since the last publish. The Broker MUST return a response
code of “2.07 No Content” if the Max-Age of the previously stored value has
expired, or if the topic has not yet been published to.</t>

<t>The Broker MUST return a response code “4.04 Not Found” if the topic
does not exist or has been removed. The Broker MUST return a response code
“4.15 Unsupported Content Format” if the Broker can not return the requested
content format.</t>

<t>The READ operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the READ operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Topic exists, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pub/sub Broker MAY allow clients to remove topics from the Broker
using the CoAP Delete
method on the URI of the topic. The CoAP pub/sub Broker MUST return
“2.02 Deleted” if the removal is successful. The Broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed.</t>

<t>When a topic is removed for any reason, the Broker SHOULD remove all of the
observers from the list of observers and return a final 4.04 “Not Found”
response as per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for the REMOVE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP Pub/sub Operation with Resource Directory">

<t>A CoAP pub/sub Broker may register the base URI, which is the REST API entry point for a pub/sub service, with a Resource
Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.</t>

<t>A CoAP pub/sub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pub/sub topics. A pub/sub
Client may use an RD to discover pub/sub Topics. A client which
registers pub/sub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pub/sub Broker.</t>

<t>A CoAP pub/sub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pub/sub Broker. See
<xref target="discover"/> in this document.</t>

<t>The pub/sub Broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pub/sub Broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the Broker, allowing the Broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the Broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the Broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the Broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the Broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the Broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the Broker is unable to serve a certain client that is sending
publish messages too fast, the Broker SHOULD respond with Response
Code 4.29, “Too Many Requests” <xref target="I-D.keranen-core-too-many-reqs"/> and
set the Max-Age Option to indicate the number of seconds after which
the client can retry. The Broker MAY stop creating notifications from
the publish messages from this client and to this topic for the
indicated time.</t>

<t>If a client receives the 4.29 Response Code from the Broker for a
publish message to a topic, it MUST NOT send new publish messages to
the Broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pub/sub Broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the Broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub Broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since Brokers terminate the exchange. While running
separate DTLS sessions from the client device to the Broker and from
Broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
Broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate Broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The Broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pub/sub Broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.
When only end-to-end encryption is necessary and the CoAP Broker is
trusted, Payload Only Protection (Mode:PAYL) could be used. The
Publisher would wrap only the payload before sending it to the Broker
and set the option Content-Format to application/smpayl. Upon
receival, the Broker can read the unencrypted CoAP header to forward
it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="response-code-value-207" title="Response Code value ‘2.07’">

<t><list style="symbols">
  <t>Response Code: 2.07</t>
  <t>Description: No Content</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: The server sends this code to the client to indicate that the request was valid and accepted, but the response may contain an empty payload. It is comparable to and may be proxied with the HTTP 204 No Content status code.</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='https://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor="I-D.keranen-core-too-many-reqs">
<front>
<title>Too Many Requests Response Code for the Constrained Application Protocol</title>

<author initials='A' surname='Keranen' fullname='Ari Keranen'>
    <organization />
</author>

<date month='March' day='19' year='2018' />

<abstract><t>A Constrained Application Protocol (CoAP) server can experience temporary overload because one or more clients are sending requests to the server at a higher rate than the server is capable or willing to handle.  This document defines a new CoAP Response Code for a server to indicate that a client should reduce the rate of requests.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-keranen-core-too-many-reqs-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-keranen-core-too-many-reqs-01.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-core-object-security">
<front>
<title>Object Security for Constrained RESTful Environments (OSCORE)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE).  OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-object-security-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-object-security-13.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-03.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter Van der Stok'>
    <organization />
</author>

<author initials='C' surname='Amsuess' fullname='Christian Amsuess'>
    <organization />
</author>

<date month='July' day='2' year='2018' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which hosts descriptions of resources held on other servers, allowing lookups to be performed for those resources.  This document specifies the web interfaces that a Resource Directory supports in order for web servers to discover the RD and to register, maintain, lookup and remove resource descriptions.  Furthermore, new link attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-14.txt' />
<format type='PDF'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-14.pdf' />
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

