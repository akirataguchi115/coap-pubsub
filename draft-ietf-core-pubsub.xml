<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-06" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2019"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe Broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server, a client, or both.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>For some applications the client/server and request/response communication model
is not optimal but publish-subscribe communication with potentially many senders
and/or receivers and communication via topics rather than directly with
endpoints may fit better.</t>

<t>This document specifies simple extensions to CoAP for enabling publish-subscribe
communication using a Broker node that enables store-and-forward messaging
between two or more nodes. This model facilitates communication of nodes with
limited reachability, enables simple many-to-many communication, and eases
integration with other publish-subscribe systems.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words ‘MUST’, ‘MUST NOT’, ‘REQUIRED’, ‘SHALL’, ‘SHALL NOT’,
‘SHOULD’, ‘SHOULD NOT’, ‘RECOMMENDED’, ‘MAY’, and ‘OPTIONAL’ in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST API defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pub/sub):'>
  A messaging paradigm where messages are published to a Broker and potential
receivers can subscribe to the Broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a Broker and publications are delivered
by the Broker to subscribed receivers.</t>
  <t hangText='CoAP pub/sub service:'>
  A group of REST resources, as defined in this document, which together
implement the required features of this specification.</t>
  <t hangText='CoAP pub/sub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The Broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pub/sub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A Broker uses the topics to match subscriptions to publications. A topic
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP Pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact
with a CoAP pub/sub Broker through the CoAP pub/sub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pub/sub Broker performs a store-and-forward of state update representations
between certain CoAP pub/sub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pub/sub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pub/sub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP Pub/sub Broker">

<t>A CoAP pub/sub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the Broker only needs to be
reachable from all clients. The Broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP Pub/sub Client">

<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub
REST API defined in this document. Clients initiate interactions with a CoAP pub/sub Broker. A data source
(e.g., sensor clients) can publish state updates to the Broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the Broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP Pub/sub Topic">

<t>The clients and Broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“/EP-33543/sen/3303/0/5700”.  The topics are hosted by a Broker and
all the clients using the Broker share the same namespace for
topics. Every CoAP pub/sub topic has an associated link, consisting of a reference
path on the Broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations and a content-format specified in the link. A
CoAP pub/sub topic value may alternatively consist of a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format. Sub-topics are also topics and
may have their own sub-topics, forming a tree structure of unique paths that
is implemented using URIs. The full URI of a topic includes a scheme and authority
for the Broker, for example “coaps://10.0.0.13:5684/EP-33543/sen/3303/0/5700”.</t>

</section>
<section anchor="brokerless-pubsub" title="brokerless Pub/sub">

<t><xref target="brokerless"/> shows an arrangement for using CoAP pub/sub in a
“Brokerless” configuration between peer nodes. Nodes in a Brokerless
system may act as both Broker and client. A node that supports Broker
functionality may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
Broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pub/sub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pub/sub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="sec-rest-api" title="CoAP Pub/sub REST API">

<t>This section defines the REST API exposed by a CoAP pub/sub Broker to pub/sub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations
MAY support a subset of the operations as required by particular constrained
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pub/sub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pub/sub Broker MAY register its pub/sub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pub/sub API using CoAP Simple Discovery. A Broker wishing to
advertise the CoAP pub/sub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A Broker MAY
advertise its supported content formats and other attributes in the
link to its pub/sub API.</t>

<t>A CoAP pub/sub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pub/sub Broker wishing to advertise topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pub/sub Broker MAY provide topic discovery functionality through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pub/sub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>Topics in the broker may be created in hierarchies (see {create}) with
parent topics having sub-topics. For a discovery the broker may choose
to not expose the sub-topics in order to limit amount of topic links
sent in a discovery response. The client can then perform discovery
for the parent topics it wants to discover the sub-topics.</t>

<t>The DISCOVER interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for the DISCOVER operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the Broker resource. A pub/sub
Broker SHOULD use the value “/ps/” for the base URI of the pub/sub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pub/sub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-create" title="CREATE">

<t>A CoAP pub/sub broker SHOULD allow Clients to create new topics on the
broker using CREATE. Some exceptions are for fixed brokerless devices
and pre-configured brokers in dedicated installations. A client wishing
to create a topic MUST use a CoAP POST to the pub/sub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. Additional link target attributes and relation values may be included in the topic specification link whena topic is created.</t>

<t>The client MAY indicate the lifetime of the topic by including the Max-Age option in the CREATE request.</t>

<t>Topic hierarchies can be created by creating parent topics. A parent
topic is created with a POST using ct (Content Format) link attribute
value which describes a supported serialization of the CoRE link
format <xref target="RFC6690"/>, such as application/link-format (ct=40) or its
JSON or CBOR serializations.  If a topic is created which describes a
link serialization, that topic may then have sub-topics created under
it as shown in <xref target="create-sub-fig"/>.</t>

<t>Ony one level in the topic hierarchy may be created as a result of a CREATE
operation, unless create on PUBLISH is supported (see <xref target="sec-publish"/>).
The topic string used in the link target MUST NOT contain the “/” character.</t>

<t>A topic creator MUST include exactly one content format link attribute value (ct)
in the create payload. If the Broker does not support the indicated format for
both publish and subscribe, or if there is more than one “ct” value included in the request, the Broker MUST reject the operation with an error code of
4.00 “Bad Request”.</t>

<t>Only one topic may be created per request. If there is more than one link 
included in a CREATE request, the Broker MUST reject the operation with an
erroro code of 4.00 “Bad Request”.</t>

<t>There is no default content format. If no ct is specified, the Broker MUST
reject the operation with an error code of 4.00 “Bad Request”.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The Broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created. Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>The CREATE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for the CREATE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE of topic hierarchy" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- POST /ps/ "<parent-topic>;ct=40" ------>|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |            Location: /ps/parent-topic/        |
  |                                               |
  |-- POST /ps/parent-topic/ "<subtopic>;ct=50" ->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |       Location: /ps/parent-topic/subtopic     |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-publish" title="PUBLISH">

<t>A CoAP pub/sub Broker MAY allow clients to PUBLISH to topics on
the Broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pub/sub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The Broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The Broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A Broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format value from the header of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t><xref target="create-publish-fig"/> shows an example of a topic being created on first
PUBLISH.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
Broker accepts PUBLISH using POST it shall respond with the 2.04 Changed
status code. If an attempt is made to PUBLISH using POST to a topic that does
not exist, the Broker SHALL return a response status indicating resource not
found, such as HTTP 404 or CoAP 4.04.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSCRIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>.</t>

<t>If a client publishes to a Broker with the Max-Age option, the Broker MUST
include the same value for the Max-Age option in all notifications.</t>

<t>A Broker MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for the PUBLISH operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a Broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pub/sub Broker MAY allow Clients to subscribe to topics on the Broker
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pub/sub Client wishing
to Subscribe to a topic on a Broker MUST use a CoAP GET with the Observe
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the Broker can supply the requested content format. The Broker
MUST reject Subscribe requests on a topic if the content format of the request
is not the content format the topic was created with.</t>

<t>If the topic was published with the Max-Age option, the
Broker MUST set the Max-Age option in the valid response to the amount of
time remaining for the value to be valid since the last publish operation
on that topic. The Broker MUST return a response code of “2.07 No Content”
if the topic has not yet been published to, or if Max-Age of the previously
stored value has expired. The Broker MUST
return a response code “4.04 Not Found” if the topic does not exist or has
been removed.</t>

<t>The Broker MUST return a response code “4.15 Unsupported Content
Format” if it can not return the requested content format. If a Broker is
unable to accept a new Subscription on a topic, it SHOULD return the
appropriate response code without the Observe option as per <xref target="RFC7641"/>
Section 4.1.</t>

<t>There is no explicit maximum lifetime of a Subscription,
thus a Broker may remove subscribers at any time. The Broker, upon removing a
Subscriber, will transmit the appropriate response code without the Observe
option, as per <xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the SUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful subscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the Broker, with a subsequent
notification. The subscribe response from the Broker uses the last
stored value associated with the topic1. The notification from the
Broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pub/sub Broker allows clients to SUBSCRIBE to topics on the Broker,
it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for the UNSUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pub/sub Broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the
topic was created with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the Broker can supply the requested content format.</t>

<t>If the topic was published with the Max-Age option, the Broker MUST set the
Max-Age option in the valid response to the amount of time remaining for
the topic to be valid since the last publish. The Broker MUST return a response
code of “2.07 No Content” if the Max-Age of the previously stored value has
expired, or if the topic has not yet been published to.</t>

<t>The Broker MUST return a response code “4.04 Not Found” if the topic
does not exist or has been removed. The Broker MUST return a response code
“4.15 Unsupported Content Format” if the Broker can not return the requested
content format.</t>

<t>The READ operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the READ operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Topic exists, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pub/sub Broker MAY allow clients to remove topics from the Broker
using the CoAP Delete
method on the URI of the topic. The CoAP pub/sub Broker MUST return
“2.02 Deleted” if the removal is successful. The Broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed.</t>

<t>When a topic is removed for any reason, the Broker SHOULD remove all of the
observers from the list of observers and return a final 4.04 “Not Found”
response as per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for the REMOVE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP Pub/sub Operation with Resource Directory">

<t>A CoAP pub/sub Broker may register the base URI, which is the REST API entry point for a pub/sub service, with a Resource
Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.</t>

<t>A CoAP pub/sub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pub/sub topics. A pub/sub
Client may use an RD to discover pub/sub Topics. A client which
registers pub/sub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pub/sub Broker.</t>

<t>A CoAP pub/sub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pub/sub Broker. See
<xref target="discover"/> in this document.</t>

<t>The pub/sub Broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pub/sub Broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the Broker, allowing the Broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the Broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the Broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the Broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the Broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the Broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the Broker is unable to serve a certain client that is sending
publish messages too fast, the Broker SHOULD respond with Response
Code 4.29, “Too Many Requests” <xref target="I-D.ietf-core-too-many-reqs"/> and
set the Max-Age Option to indicate the number of seconds after which
the client can retry. The Broker MAY stop creating notifications from
the publish messages from this client and to this topic for the
indicated time.</t>

<t>If a client receives the 4.29 Response Code from the Broker for a
publish message to a topic, it MUST NOT send new publish messages to
the Broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pub/sub Broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the Broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub Broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since Brokers terminate the exchange. While running
separate DTLS sessions from the client device to the Broker and from
Broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
Broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate Broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The Broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pub/sub Broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.
An example application that uses the CoAP pub/sub Broker and relies on 
end-to-end object security is described in <xref target="RFC8387"/>. 
When only end-to-end encryption  is necessary and the CoAP Broker is 
trusted, Payload Only Protection (Mode:PAYL) could be used. 
The Publisher would wrap only the  payload before sending it to 
the Broker and set the option Content-Format to application/smpayl. 
Upon receival, the Broker can read the unencrypted CoAP header 
to forward it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="response-code-value-207" title="Response Code value ‘2.07’">

<t><list style="symbols">
  <t>Response Code: 2.07</t>
  <t>Description: No Content</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: The server sends this code to the client to indicate that the request was valid and accepted, but the response may contain an empty payload. It is comparable to and may be proxied with the HTTP 204 No Content status code.</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='https://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor="I-D.ietf-core-too-many-reqs">
<front>
<title>Too Many Requests Response Code for the Constrained Application Protocol</title>

<author initials='A' surname='Keranen' fullname='Ari Keranen'>
    <organization />
</author>

<date month='November' day='6' year='2018' />

<abstract><t>A Constrained Application Protocol (CoAP) server can experience temporary overload because one or more clients are sending requests to the server at a higher rate than the server is capable or willing to handle.  This document defines a new CoAP Response Code for a server to indicate that a client should reduce the rate of requests.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-too-many-reqs-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-too-many-reqs-06.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-core-object-security">
<front>
<title>Object Security for Constrained RESTful Environments (OSCORE)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='August' day='31' year='2018' />

<abstract><t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE).  OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-object-security-15' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-object-security-15.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-03.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter van der Stok'>
    <organization />
</author>

<author initials='C' surname='Amsuess' fullname='Christian Amsuess'>
    <organization />
</author>

<date month='December' day='20' year='2018' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which contains information about resources held on other servers, allowing lookups to be performed for those resources.  The input to an RD is composed of links and the output is composed of links constructed from the information stored in the RD.  This document specifies the web interfaces that a Resource Directory supports for web servers to discover the RD and to register, maintain, lookup and remove information on resources.  Furthermore, new target attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-18' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-18.txt' />
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC8387" target='https://www.rfc-editor.org/info/rfc8387'>
<front>
<title>Practical Considerations and Implementation Experiences in Securing Smart Object Networks</title>
<author initials='M.' surname='Sethi' fullname='M. Sethi'><organization /></author>
<author initials='J.' surname='Arkko' fullname='J. Arkko'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<author initials='H.' surname='Back' fullname='H. Back'><organization /></author>
<date year='2018' month='May' />
<abstract><t>This memo describes challenges associated with securing resource- constrained smart object devices.  The memo describes a possible deployment model where resource-constrained devices sign message objects, discusses the availability of cryptographic libraries for resource-constrained devices, and presents some preliminary experiences with those libraries for message signing on resource- constrained devices.  Lastly, the memo discusses trade-offs involving different types of security approaches.</t></abstract>
</front>
<seriesInfo name='RFC' value='8387'/>
<seriesInfo name='DOI' value='10.17487/RFC8387'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAEWlLVwAA+19a3cbR3Lo9/4VfaAPEmMAJPWwZe7aCS3SWW70YEhqN75J
Ts4AaICzHMzA0wNStKz8n/s77h+79erXzIAPybHsk6V9bADT011dVV2vrq4e
jUbKNlk5+6+sqEqzp5t6bVS+qumTbR7v7Hy981jNqmmZLeHxrM7mzSg3zXw0
rWoD/8lWo9V6YteT0c6Xapo1e9o2M7XK95TWTTXd0w+vjX3IX6rlKps2yU8z
s2rO4Zcn8j0vZ6aMmtjrZW3mNvqhqpv0F+h2Ce9Ev+RlkeNk/DtNndO4ZSUv
CBz8HYBPf2rypoDXj9eTIrfno1OY37TOJ0Z/V1cXptbzqtbNudEvqhK6zmCs
md5frYoc5p9XpT6uK5xtoR+9qPaPt1Q2mdTm8pYOsam6uNrTR2Vj6tI0owNE
tpplDcDyeGf3a5Wtm/Oq3lMjmCFM99VY/wv8W1loD9NgCr3Kp+eZKcLPVb3Y
06fLrG7OzvNyYeEns8zywjcdc9N/stimoTZjwIcbZZ9HMXVWmtIPs1/n0W80
xiEg2dqqDANkdT6+4Eb/ZORp3PWfx/Rvvvx//7c0P/m+/5zlSxP/vKH7v2G7
8d/gP9AsHaCs6iXQ4tIgG558/+LJ18+/lI+Pd3e/lo9ffvn1jvv47Cv38asv
n+66j4+fPcaPR6ODcWD6pqpGy6y8HtXmR7unVF7O4+HSxtXkb2bajKyZruu8
uXYNVrDelpO8zEfZNF1Gq7qa50VPT7Wx1bqG1rO8hi6r+lqgfPb18+fy8fmT
518BRKPRSGcT5M1po9TZ3Vl1qEEW6NoUwHQzbd41prTQzAIpDdAMvs7MTDUV
rJnVClaiXmZT4BjEyUg+0npcl26AvIQ1DPy1tPrq3EAvIGaAoHoJUwIyzQz3
7SYHb3tAh/jyCpgyn66LjFdJUV3pVXUFa+YKsFAYa7UFGKtawYq5quoLO9bA
51aDyFqjWNAzM4fOYBS9kuVnNy0/WNRZo2jWM0srfJqtskle5E0OPVRzboXN
Zf6wWDRP4ipvzgE6+A5rPbuwALuCuZRAqfwSCI+I3YYX16tRg2zLRFrms1lh
lHqAq76uZuspIe39gzz6+uFeJNTv3wvnfvjgwLTqVjpl07oCZDos4mQjUqiZ
ucynBpBLGFhbQijw/9rYZhuIt4K2Bog6A9HDdJ4WOUpl4JAL41oCUitlTX1p
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
/4nD+CszowAA

-->

</rfc>

