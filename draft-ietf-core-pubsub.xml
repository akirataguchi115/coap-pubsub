<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-02" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2018"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server or a client.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>This document specifies the means for nodes with limited reachability to
communicate using simple extensions to CoAP. The extensions enable publish-subscribe
communication using a broker node that enables store-and-forward messaging
between two or more nodes. Furthermore the extensions facilitate many-to-many
communication using CoAP.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words ‘MUST’, ‘MUST NOT’, ‘REQUIRED’, ‘SHALL’, ‘SHALL NOT’,
‘SHOULD’, ‘SHOULD NOT’, ‘RECOMMENDED’, ‘MAY’, and ‘OPTIONAL’ in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST interfaces defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pub/sub):'>
  A messaging paradigm where messages are published to a broker and potential
receivers can subscribe to the broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a broker and publications are delivered
by the broker to subscribed receivers.</t>
  <t hangText='CoAP pub/sub service:'>
  A group of REST resources, as defined in this document, which together implement the required features of this specification.</t>
  <t hangText='CoAP pub/sub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pub/sub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A broker uses the topics to match subscriptions to publications. A topic
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP Pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact
with a CoAP pub/sub Broker through the CoAP pub/sub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pub/sub Broker performs a store-and-forward of state update representations
between certain CoAP pub/sub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pub/sub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pub/sub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP Pub/sub Broker">

<t>A CoAP pub/sub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the broker only needs to be
reachable from all clients. The broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP Pub/sub Client">

<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub
REST API defined in this document. Clients initiate interactions with a CoAP pub/sub broker. A data source
(e.g., sensor clients) can publish state updates to the broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP Pub/sub Topic">

<t>The clients and broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“EP-33543/sen/3303/0/5700”.  The topics are hosted at the broker and
all the clients using the broker share the same namespace for
topics. Every CoAP pub/sub topic has a link, consisting of a reference
path on the broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations with a content-format specified in the link. A
CoAP pub/sub topic value may alternatively be a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format.</t>

</section>
<section anchor="brokerless-pubsub" title="Brokerless Pub/sub">

<t><xref target="brokerless"/> shows an arrangement for using CoAP pub/sub in a
“brokerless” configuration between peer nodes. Nodes in a brokerless
system may act as both broker and client. The Broker interface in a
brokerless node may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pub/sub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pub/sub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="function-set" title="CoAP Pub/sub REST API">

<t>This section defines the REST API exposed by a CoAP pub/sub Broker to pub/sub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations
MAY support a subset of the operations as required by particular constrained
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pub/sub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pub/sub broker MAY register its pub/sub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pub/sub API using CoAP Simple Discovery. A broker wishing to
advertise the CoAP pub/sub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A broker MAY
advertise its supported content formats and other attributes in the
link to its pub/sub API.</t>

<t>A CoAP pub/sub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pub/sub broker wishing to advertize topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pub/sub Broker MAY expose the Discover interface through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pub/sub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>The DISCOVER interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the broker resource. A pub/sub
broker SHOULD use the value “/ps/” for the base URI of the pub/sub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pub/sub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="create" title="CREATE">

<t>A CoAP pubsub broker SHOULD allow Clients to create new topics on the
broker using CREATE. Some exceptions are for fixed brokerless devices
and pre-configured brokers in dedicated installations. A client wishing
to create a topic MUST use CoAP POST to the pubsub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. The client MAY indicate the lifetime of
the topic by including the Max-Age option in the CREATE request.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created. Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>Topics may be created as sub-topics of other topics. A client MAY
create a topic with a ct (Content Format) link attribute value which
describes a supported serialization of the CoRE link format
<xref target="RFC6690"/> such as application/link-format (ct=40) or its JSON or
CBOR serializations.  If a topic is created which describes a link
serialization, that topic may then have sub-topics created under it as
shown in <xref target="create-sub-fig"/>.</t>

<t>The CREATE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" -------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE sub-topic" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------- POST /ps/ "<mainTopic>;ct=40" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |             Location: /ps/mainTopic/          |
  |                                               |
  | --- POST /ps/mainTopic/ "<subTopic>;ct=50" -->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |        Location: /ps/mainTopic/subTopic       |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="publish" title="PUBLISH">

<t>A CoAP pub/sub broker MAY allow clients to PUBLISH to topics on
the broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pub/sub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format of the payload of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
broker accepts PUBLISH using POST it shall respond with the 2.04 Changed
status code.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSRCIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>. If a client
publishes to a broker with the Max-Age option, the broker MUST include
the same value for the Max-Age option in all notifications. A broker
MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pub/sub broker MAY allow Clients to subscribe to topics on the Broker
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pub/sub Client wishing
to Subscribe to a topic on a broker MUST use a CoAP GET with the Observe
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the broker can supply the requested content format. The broker
MUST reject Subscribe requests on a topic if the content format of the request
is not supported by the content format the topic was created with. The broker
MAY accept Subscribe requests which specify content formats that the broker
can supply as alternate content formats to the content format the topic was
registered with. If the topic was published with the Max-Age option, the
broker MUST set the Max-Age option in the valid response to the amount of
time remaining for the value to be valid since the last publish operation
on that topic. The Broker MUST return a response code of “2.07 No Content”
if the Max-Age of the previously stored value has expired. The Broker MUST
return a response code “4.04 Not Found” if the topic does not exist or has
been removed. The Broker MUST return a response code “4.15 Unsupported Content
Format” if it can not return the requested content format. If a Broker is
unable to accept a new Subscription on a topic, it SHOULD return the
appropriate
response code without the Observe option as per as per <xref target="RFC7641"/>
Section 4.1. There is no explicit maximum lifetime of a Subscription,
thus
a Broker may remove subscribers at any time. The Broker, upon removing a
Subscriber, will transmit the appropriate response code without the Observe
option, as per <xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful subscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the broker, with a subsequent
notification. The subscribe response from the broker uses the last
stored value associated with the topic1. The notification from the
broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pub/sub broker allows clients to SUBSCRIBE to topics on the broker, it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pub/sub broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the topic was created with.
The broker MAY accept Read requests which specify content formats that the
broker can supply as alternate content formats to the content format the
topic was registered with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the broker can supply the requested content format. If
the topic was published with the Max-Age option, the broker MUST set the
Max-Age option in the valid response to the amount of time remaining for
the topic to be valid since the last publish. The Broker MUST return a response
code of “2.07 No Content” if the Max-Age of the previously stored value has
expired. The Broker MUST return a response code “4.04 Not Found” if the topic
does not exist or has been removed. The Broker MUST return a response code
“4.15 Unsupported Content Format” if the broker can not return the requested
content format.</t>

<t>The READ interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Topic exists, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pub/sub broker MAY allow clientsremove a topics from the broker
using the CoAP Delete
method on the URI of the topic. The CoAP pub/sub Broker MUST return
“2.02 Deleted” if the removal is successful. The broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed. When a topic is removed for
any reason, the Broker SHOULD return the response code 4.04 Not Found
and remove all of the observers from the list of observers as per as
per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP Pub/sub Operation with Resource Directory">

<t>A CoAP pub/sub Broker may register the base URI, which is the REST API entry point for a pub/sub service, with a Resource
Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.</t>

<t>A CoAP pub/sub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pub/sub topics. A pub/sub
Client may use an RD to discover pub/sub Topics. A client which
registers pub/sub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pub/sub Broker.</t>

<t>A CoAP pub/sub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pub/sub broker. See
<xref target="discover"/> in this document.</t>

<t>The pub/sub broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pub/sub broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the broker, allowing the broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the broker is unable to serve a certain client that is sending
publish messages too fast, the broker MUST respond with Response Code
4.29, “Too Many Requests”. This Response Code is like HTTP 429 “Too
Many Requests” but uses the Max-Age Option in place of the
“Retry-After” header field to indicate the number of seconds after
which to retry. The broker MAY stop creating notifications from the
publish messages from this client and to this topic for the indicated
time.</t>

<t>If a client receives the 4.29 Response Code from the broker for a
publish message to a topic, it MUST NOT send new publish messages to
the broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pub/sub broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since brokers terminate the exchange. While running
separate DTLS sessions from the client device to the broker and from
broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pub/sub broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.
When only end-to-end encryption is necessary and the CoAP Broker is
trusted, Payload Only Protection (Mode:PAYL) could be used. The
Publisher would wrap only the payload before sending it to the broker
and set the option Content-Format to application/smpayl. Upon
receival, the Broker can read the unencrypted CoAP header to forward
it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters
Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="function-set"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="function-set"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="response-code-value-207" title="Response Code value ‘2.07’">

<t><list style="symbols">
  <t>Response Code: 2.07</t>
  <t>Description: Add No Content response to GET to the existing definition of
the 2.07 response code.</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: The server sends this code to the client to indicate that the request was valid and accepted, but the responce may contain an empty payload. It is comparable to and may be proxied with the http 204 No Content status code.</t>
</list></t>

</section>
<section anchor="response-code-value-429" title="Response Code value ‘4.29’">

<t><list style="symbols">
  <t>Response Code: 4.29</t>
  <t>Description: This error code is used by a server to indicate that a client
is making too many requests on a resource.</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='https://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.selander-ace-object-security">
<front>
<title>Object Security of CoAP (OSCOAP)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='October' day='11' year='2016' />

<abstract><t>This memo defines Object Security of CoAP (OSCOAP), a method for application layer protection of message exchanges with the Constrained Application Protocol (CoAP), using the CBOR Object Signing and Encryption (COSE) format.  OSCOAP provides end-to-end encryption, integrity and replay protection to CoAP payload, options, and header fields, as well as a secure binding between CoAP request and response messages.  The use of OSCOAP is signaled with the CoAP option Object-Security, also defined in this memo.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-selander-ace-object-security-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-selander-ace-object-security-06.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='September' day='28' year='2017' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-01.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter Van der Stok'>
    <organization />
</author>

<author initials='C' surname='Amsuess' fullname='Christian Amsuess'>
    <organization />
</author>

<date month='October' day='30' year='2017' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which hosts descriptions of resources held on other servers, allowing lookups to be performed for those resources.  This document specifies the web interfaces that a Resource Directory supports in order for web servers to discover the RD and to register, maintain, lookup and remove resource descriptions.  Furthermore, new link attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-12.txt' />
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIADq1VVoAA+19+3YbR3L3//0Ufag/JMUASEryjbt2QpF0lhuJZEhqN5t8
OTkDoAHOcjCDnR6IgmXlffIcebHUrW8zA5K6fJadmMfHIoGZ7urq6qpfVVdX
D4dDZZusnP5HVlSl2dNNvTIqX9b0m22e7Ox8u/NETatJmS3g62mdzZphbprZ
cFLVBv6XLYfL1diuxkN4bpI1e9o2U7XM95TWTTXZ0w/Xxj7kP6rFMps0yUdT
s2yu4JOn8ndeTk0ZPWLXi9rMbPRBVTfpJ9DsAt6JPsnLIsfB+HeaOqd+y0pe
EDr4byA+/ajJmwJeP1uNi9xeDS9gfJM6Hxv9vK6uTa1nVa2bK6MPqhKazqCv
qd5fLoscxp9XpT6rKxxtoR8dVPtnj1U2Htfm9R0N4qPq+mZPH5eNqUvTDA+R
2WqaNUDLk53db1S2aq6qek8NYYQw3Jcj/U/wX2XheRgGz9DLfHKVmSJ8XNXz
PX2xyOrm8iov5xY+MossL/yjI370Hyw+09AzI+CH62WfezF1VprSd7Nf59Fn
1McRMNnaqgwdZHU+uuaH/sHIt3HTfxzRf/niv/+rND/6tv+Y5QsTf7yh+b/i
c6O/wv/gsbSDsqoXMBevDYrh+Q8HT7/95iv59cnu7rfy61dffbvjfv3ya/fr
118923W/PvnyyZ7Ky1nc3PHwcGRNAYvG1MNsYobV+K9m0gytmazqvFm7Z5aw
pBbjvMzpoXilLOtqlhe+sbCcamOrVQ1PT/MamqzqtRDy5bfffLOn1HA41NkY
ZW7SKHV5fxEcaCBX10B1Aw+aN40pLTxmYYoMzAX8OTVT1VSwFpZLWGF6kU1A
EsywqYbyK62zVek6yEtYmyA3C6tvrgy0AuoDJkovYBzA/qnhtt2I4G1P6ABf
XoKw5ZNVkbH0F9WNXlY3sBZuYOiFsVZboLGqFayEm6q+tiMN8ms1qKIVLnc9
NTNoDHrRS1lW1i+rcbqsYLFmjaJRTy2t3Em2zMZ5kTc5tFDN+Cl8XMYPi0Dz
IG7y5gqog79hDWfXFmhXMJYSpid/DbONjN2GF1fLYYPiyJO0yKfTwij1AFdz
XU1XE2La2wd59Oe795pC/fatSOS7d45Mq+6cp2xSV8BMx0UcbDQVampe5xMD
zCUOrCwxtDZ/WxnbbMPkLeFZA5M6BZXC8zwpctS2ICHXxj0JTK2UNfVrUyOD
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
Sbt79bJdK8rdqsfU2taDvnIvNNc9bv8Gg0MS8X8En9yv+L+mO8j8iXYJ+LoG
pShbFEllBsqs3zUDkRClN+G05kMKw4uBx9L3fRcaYDptnc/nXGKfpO5Q7FOd
m9d4XvChdWYK76nqVNXW+ji6b4q5B0NhKDkQdIOvL1ZYozevbaOiQuESIu0U
C2/ZY1d74cIYFcqD45n29k1hbKVa+FjGaPtH6AY4XrurWsHPpzOtTjjw7OXa
nxCWAO4mmvsWIaEA6Fguk+UsQ64mL2QERvm0mvsxhevNl/AAXuHKJ7cXaHiJ
yp4LC9yJn3sIMuFpvhIcbDvAjYKvBtMXeK388M94UNXrwdaFHADfX+cEDPRN
to6u6pPbe/AAALbirzIKJ5EHGH0l3UaVpE09xwvnSUTzKd6ODuJaTSl1PqeF
s8gAfLvS1TSPV/mscafmhel1VbSuXh6w09S6r4sj7lkBVNuhXJAlZ5oVCU58
VyUXqHMJFFRHID2AK2NGuIyjxbqSCnN8Xdwq2UwguZDjxz7M37p6NE6gypRr
VPoZJNcCR/sf0f5K2qC7iVi5MbRyGSjelVwwF00UDOVFfm1ucvvB44jDb4rK
6PE96LozMr4jNcO7HQZ8YZ+cF8+YSE8W1zeJ51M6xaWOJ/SYEu99Jbzh66Ri
WkXiuerGD5TzIlU33j7oHNsDmOs3aaLLqsgvw0os0WWMkk5SYJ3EKPM+SbFL
Tg3SKW6XSedST/i2CVdI0S2aTLWaTTOj3W3SdLk4FhRZFU1WGtrwiSdScbMT
DISiwr25MgVCbs5N9wfJF1EFy+QW6mW1xEWgnDdKF3Zd4YF2XsJu92tEOUoR
z/DMqM9el4M//npdfxtH1kjOIV2v3UNABRjf1bhIi79EJQq8w3OAm0h45nOw
6dAn9JY8jd0XsAD0Hy4vz/QzOS2qWjVbxqsm5Fy6jbZTv0XI1VFYt6utczAI
6+H+DHGnvgK5xgOXuSmmLVRhdLlajDk7CaQQRgPzim8pdyM62ZZ1GmTBS5pg
MqRcUPu67mB6OryUb3Ib3cbGytSfZHVnRPz5ZRWm1idZJLen0PnalKHtXFXC
u21yosNbIR3t5PSSlxSeceiRhVgliNKhMgNM/NjMKrmlkesklKFmsp8z3P1c
ZtZyqbwH6FKDVWrw3sbSgq1zhTTePnDfpF+076wCs0tyQR9GN4MNuNhoj0tx
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
Dc2R7te5uSE1jpuuYxii+h9KfuygD54AAA==

-->

</rfc>

