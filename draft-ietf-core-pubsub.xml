<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-07" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2019"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe Broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server, a client, or both.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>For some applications the client/server and request/response communication model
is not optimal but publish-subscribe communication with potentially many senders
and/or receivers and communication via topics rather than directly with
endpoints may fit better.</t>

<t>This document specifies simple extensions to CoAP for enabling publish-subscribe
communication using a Broker node that enables store-and-forward messaging
between two or more nodes. This model facilitates communication of nodes with
limited reachability, enables simple many-to-many communication, and eases
integration with other publish-subscribe systems.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 [RFC2119] [RFC8174] when, and only when, they
appear in all capitals, as shown here.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST API defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pub/sub):'>
  A messaging paradigm where messages are published to a Broker and potential
receivers can subscribe to the Broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a Broker and publications are delivered
by the Broker to subscribed receivers.</t>
  <t hangText='CoAP pub/sub service:'>
  A group of REST resources, as defined in this document, which together
implement the required features of this specification.</t>
  <t hangText='CoAP pub/sub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The Broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pub/sub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A Broker uses the topics to match subscriptions to publications. A reference to a Topic on a Broker 
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP Pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact
with a CoAP pub/sub Broker through the CoAP pub/sub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pub/sub Broker performs a store-and-forward of state update representations
between certain CoAP pub/sub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pub/sub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pub/sub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP Pub/sub Broker">

<t>A CoAP pub/sub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the Broker only needs to be
reachable from all clients. The Broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP Pub/sub Client">

<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub
REST API defined in this document. Clients initiate interactions with a CoAP pub/sub Broker. A data source
(e.g., sensor clients) can publish state updates to the Broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the Broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP Pub/sub Topic">

<t>The clients and Broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“/EP-33543/sen/3303/0/5700”.  The topics are hosted by a Broker and
all the clients using the Broker share the same namespace for
topics.</t>

<t>Every CoAP pub/sub topic has an associated link, consisting of a reference
path on the Broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations and a content-format specified in the link. A
CoAP pub/sub topic value may alternatively consist of a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format. Sub-topics are also topics and
may have their own sub-topics, forming a tree structure of unique paths that
is implemented using URIs. The full URI of a topic includes a scheme and 
authority for the Broker, for example 
“coaps://192.0.2.13:5684/EP-33543/sen/3303/0/5700”.</t>

<t>A Topic may have a lifetime defined by using the CoAP Max-Age option on topic 
creation, or on publish operations to the topic. The lifetime is refreshed each 
time a representation is published to the topic. If the lifetime expires, the 
topic is removed from discovery responses, returns errors on subscription, and 
any outstanding subscriptions are cancelled.</t>

</section>
<section anchor="brokerless-pubsub" title="Brokerless Pub/sub">

<t>In some use cases, it is desireable to use pub/sub semantics for peer-to-peer 
communication, but it is not feasible or desireable to include a separate node 
on the network to serve as a Broker. In other use cases, it is desireable to enable one-way-only communication, such as sensors pushing updates to a service.</t>

<t><xref target="brokerless"/> shows an arrangement for using CoAP pub/sub in a
“Brokerless” configuration between peer nodes. Nodes in a Brokerless
system may act as both Broker and client. A node that supports Broker
functionality may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
Broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pub/sub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pub/sub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="sec-rest-api" title="CoAP Pub/sub REST API">

<t>This section defines the REST API exposed by a CoAP pub/sub Broker to pub/sub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations
MAY support a subset of the operations as required by particular constrained
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pub/sub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pub/sub Broker MAY register its pub/sub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pub/sub API using CoAP Simple Discovery. A Broker wishing to
advertise the CoAP pub/sub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A Broker MAY
advertise its supported content formats and other attributes in the
link to its pub/sub API.</t>

<t>A CoAP pub/sub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pub/sub Broker wishing to advertise topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pub/sub Broker MAY provide topic discovery functionality through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pub/sub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>Topics in the broker may be created in hierarchies (see <xref target="sec-create"/>) with
parent topics having sub-topics. For a discovery the broker may choose
to not expose the sub-topics in order to limit amount of topic links
sent in a discovery response. The client can then perform discovery
for the parent topics it wants to discover the sub-topics.</t>

<t>The DISCOVER interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for the DISCOVER operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the Broker resource. A pub/sub
Broker SHOULD use the value “/ps/” for the base URI of the pub/sub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pub/sub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-create" title="CREATE">

<t>A CoAP pub/sub broker SHOULD allow Clients to create new topics on the
broker using CREATE. Some exceptions are for fixed brokerless devices
and pre-configured brokers in dedicated installations. A client wishing
to create a topic MUST use a CoAP POST to the pub/sub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. Additional link target attributes and relation
values MAY be included in the topic specification link when a topic is created.</t>

<t>The client MAY indicate the lifetime of the topic by including the Max-Age
option in the CREATE request.</t>

<t>Topic hierarchies can be created by creating parent topics. A parent
topic is created with a POST using ct (Content Format) link attribute
value which describes a supported serialization of the CoRE link
format <xref target="RFC6690"/>, such as application/link-format (ct=40) or its
JSON or CBOR serializations.  If a topic is created which describes a
link serialization, that topic may then have sub-topics created under
it as shown in <xref target="create-sub-fig"/>.</t>

<t>Ony one level in the topic hierarchy may be created as a result of a CREATE
operation, unless create on PUBLISH is supported (see <xref target="sec-publish"/>).
The topic string used in the link target MUST NOT contain the “/” character.</t>

<t>A topic creator MUST include exactly one content format link attribute value (ct) in the create payload. If the content format option is not included or if the option is repeated, the Broker MUST reject the operation with an error code of “4.00 Bad Request”.</t>

<t>Only one topic may be created per request. If there is more than one link 
included in a CREATE request, the Broker MUST reject the operation with an
error code of “4.00 Bad Request”.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and MUST return the URI path of the created topic via Location-Path
options. If a new topic can not be created, the Broker MUST return the appropriate 4.xx response code indicating the reason for failure.</t>

<t>A Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  A Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>A topic creator SHOULD PUBLISH an initial value to a newly-created Topic in order to enable responses to READ and SUBSCRIBE requests that may be submitted after the topic is discoverable.</t>

<t>The CREATE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for the CREATE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE of topic hierarchy" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- POST /ps/ "<parent-topic>;ct=40" ------>|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |            Location: /ps/parent-topic/        |
  |                                               |
  |-- POST /ps/parent-topic/ "<subtopic>;ct=50" ->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |       Location: /ps/parent-topic/subtopic     |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-publish" title="PUBLISH">

<t>A CoAP pub/sub Broker MAY allow clients to PUBLISH to topics on
the Broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pub/sub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The Broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The Broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A Broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format value from the header of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t><xref target="create-publish-fig"/> shows an example of a topic being created on first
PUBLISH.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
Broker accepts PUBLISH using POST it shall respond with the 2.04 Changed
status code. If an attempt is made to PUBLISH using POST to a topic that does
not exist, the Broker SHALL return a response status indicating resource not
found, such as HTTP 404 or CoAP 4.04.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSCRIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>.</t>

<t>If a client publishes to a Broker without the Max-Age option, the Broker MUST
refresh the topic lifetime with the most recently set Max-Age value, and the 
Broker MUST include the most recently set Max-Age value in the Max-Age option of 
all notifications.</t>

<t>If a client publishes to a Broker with the Max-Age option, the Broker MUST
include the same value for the Max-Age option in all notifications.</t>

<t>A Broker MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for the PUBLISH operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a Broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pub/sub Broker MAY allow Clients to subscribe to topics on the Broker
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pub/sub Client wishing
to Subscribe to a topic on a Broker MUST use a CoAP GET with the Observe
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the Broker can supply the requested content format. The Broker
MUST reject Subscribe requests on a topic if the content format of the request
is not the content format the topic was created with.</t>

<t>If the topic was published with the Max-Age option, the Broker MUST set the Max-Age option in the valid response to the amount of time remaining for the value to be valid since the last publish operation on that topic.</t>

<t>The Broker MUST return a response code “4.04 Not Found” if the topic does not 
exist or has been removed, or if Max-Age of a previously published 
representation has expired.</t>

<t>If a Topic has been created but not yet published to when a SUBSCRIBE to the 
topic is received, the Broker MAY acknowledge and queue the pending SUBSCRIBE 
and defer the response until an initial PUBLISH occurs.</t>

<t>The Broker MUST return a response code “4.15 Unsupported Content Format” if it 
can not return the requested content format. If a Broker is unable to accept a 
new Subscription on a topic, it SHOULD return the appropriate response code 
without the Observe option as per <xref target="RFC7641"/> Section 4.1.</t>

<t>There is no explicit maximum lifetime of a Subscription, thus a Broker may 
remove subscribers at any time. The Broker, upon removing a Subscriber, will 
transmit the appropriate response code without the Observe option, as per 
<xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the SUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the Broker, with a subsequent
notification. The subscribe response from the Broker uses the last
stored value associated with the topic1. The notification from the
Broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pub/sub Broker allows clients to SUBSCRIBE to topics on the Broker,
it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for the UNSUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pub/sub Broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the
topic was created with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the Broker can supply the requested content format.</t>

<t>If the topic was published with the Max-Age option, the Broker MUST set the 
Max-Age option in the valid response to the amount of time remaining for the 
value to be valid since the last publish operation on that topic.</t>

<t>The Broker MUST return a response code “4.04 Not Found” if the topic does not 
exist or has been removed, or if Max-Age of a previously published 
representation has expired.</t>

<t>If a Topic has been created but not yet published to when a READ to the topic is 
received, the Broker MAY acknowledge and queue the pending READ, and defer the 
response until an initial PUBLISH occurs.</t>

<t>The Broker MUST return a response code “4.15 Unsupported Content Format” if the 
Broker can not return the requested content format.</t>

<t>The READ operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the READ operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pub/sub Broker MAY allow clients to remove topics from the Broker
using the CoAP Delete
method on the URI of the topic. The CoAP pub/sub Broker MUST return
“2.02 Deleted” if the removal is successful. The Broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed.</t>

<t>When a topic is removed for any reason, the Broker SHOULD remove all of the
observers from the list of observers and return a final 4.04 “Not Found”
response as per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for the REMOVE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP Pub/sub Operation with Resource Directory">

<t>A CoAP pub/sub Broker may register the base URI, which is the REST API entry point for a pub/sub service, with a Resource
Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.</t>

<t>A CoAP pub/sub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pub/sub topics. A pub/sub
Client may use an RD to discover pub/sub Topics. A client which
registers pub/sub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pub/sub Broker.</t>

<t>A CoAP pub/sub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pub/sub Broker. See
<xref target="discover"/> in this document.</t>

<t>The pub/sub Broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pub/sub Broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the Broker, allowing the Broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the Broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the Broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the Broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the Broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the Broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the Broker is unable to serve a certain client that is sending publish 
messages too fast, the Broker SHOULD respond with Response Code 4.29, “Too Many 
Requests” <xref target="RFC8516"/> and set the Max-Age Option to indicate the number of 
seconds after which the client can retry. The Broker MAY stop creating 
notifications from the publish messages from this client and to this topic for 
the indicated time.</t>

<t>If a client receives the 4.29 Response Code from the Broker for a
publish message to a topic, it MUST NOT send new publish messages to
the Broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pub/sub Broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the Broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub Broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since Brokers terminate the exchange. While running
separate DTLS sessions from the client device to the Broker and from
Broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
Broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate Broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The Broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pub/sub Broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.
An example application that uses the CoAP pub/sub Broker and relies on 
end-to-end object security is described in <xref target="RFC8387"/>. 
When only end-to-end encryption  is necessary and the CoAP Broker is 
trusted, Payload Only Protection (Mode:PAYL) could be used. 
The Publisher would wrap only the  payload before sending it to 
the Broker and set the option Content-Format to application/smpayl. 
Upon receival, the Broker can read the unencrypted CoAP header 
to forward it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='https://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference  anchor="RFC8516" target='https://www.rfc-editor.org/info/rfc8516'>
<front>
<title>&quot;Too Many Requests&quot; Response Code for the Constrained Application Protocol</title>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2019' month='January' />
<abstract><t>A Constrained Application Protocol (CoAP) server can experience temporary overload because one or more clients are sending requests to the server at a higher rate than the server is capable or willing to handle.  This document defines a new CoAP response code for a server to indicate that a client should reduce the rate of requests.</t></abstract>
</front>
<seriesInfo name='RFC' value='8516'/>
<seriesInfo name='DOI' value='10.17487/RFC8516'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-core-object-security">
<front>
<title>Object Security for Constrained RESTful Environments (OSCORE)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='March' day='6' year='2019' />

<abstract><t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE).  OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.  Although being an optional functionality of CoAP, OSCORE alters CoAP options processing and IANA registration.  Therefore, this document updates [RFC7252].</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-object-security-16' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-object-security-16.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-03.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter van der Stok'>
    <organization />
</author>

<author initials='C' surname='Amsuess' fullname='Christian Amsuess'>
    <organization />
</author>

<date month='January' day='11' year='2019' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which contains information about resources held on other servers, allowing lookups to be performed for those resources.  The input to an RD is composed of links and the output is composed of links constructed from the information stored in the RD.  This document specifies the web interfaces that a Resource Directory supports for web servers to discover the RD and to register, maintain, lookup and remove information on resources.  Furthermore, new target attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-19' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-19.txt' />
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC8387" target='https://www.rfc-editor.org/info/rfc8387'>
<front>
<title>Practical Considerations and Implementation Experiences in Securing Smart Object Networks</title>
<author initials='M.' surname='Sethi' fullname='M. Sethi'><organization /></author>
<author initials='J.' surname='Arkko' fullname='J. Arkko'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<author initials='H.' surname='Back' fullname='H. Back'><organization /></author>
<date year='2018' month='May' />
<abstract><t>This memo describes challenges associated with securing resource- constrained smart object devices.  The memo describes a possible deployment model where resource-constrained devices sign message objects, discusses the availability of cryptographic libraries for resource-constrained devices, and presents some preliminary experiences with those libraries for message signing on resource- constrained devices.  Lastly, the memo discusses trade-offs involving different types of security approaches.</t></abstract>
</front>
<seriesInfo name='RFC' value='8387'/>
<seriesInfo name='DOI' value='10.17487/RFC8387'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAHDKhlwAA+1923YbR5Lge35FHujB0hgASV1smd32DE3SY/XowiGp7vH2
9tmTABJkNQtV6MoCKVrW/s9+x/7Yxi1vhQJJXdZyn7FOnzYIVGVGRkTGPSNH
o5Fyralm/8uUdWV3ddusrCqWDX1y7cPt7W+2H6pZPa3MAn6eNWbejgrbzkfT
urHwf2Y5Wq4mbjUZbX+tpqbd1a6dqWWxq7Ru6+mu/uLaui/4j3qxNNM2+2pm
l+05fPNI/i6qma2SR9z1orFzl3xRN23+DQy7gHeSb4qqLHAx4Z22KWjeqpYX
BA7+G4DPv2qLtoTXj1aTsnDnoxNY37QpJlZ/39QXttHzutHtudX7dQVDG5hr
pveWy7KA9Rd1pY+aGldb6vv79d7RA2Umk8Ze3jIgPqournb1s6q1TWXb0QEi
W81MC7A83N75RplVe143u2oEK4Tlvhjr/4D/1Q6eh2UwhV4U03Njy/h13Zzt
6pOFadrT86I6c/CVXZiiDI+O+dF/c/hMS8+MAR9+lj2exTamslWYZq8pku9o
jkNAsnN1FScwTTG+4If+zcqv6dB/GtP/isX//T+V/TmM/SdTLGz69Ybh/47P
jf8O/weP5RNUdbMAWlxaZMPjH/YfffP0K/n4cGfnG/n41VffbPuPT772H7/+
6vGO//jwyUP5+PTJDoygimqeDv1sdDCOu6Ge/N1O25Gz01VTtNf+gSXsrcWk
qIqRmeZbZtnU86LsGamxrl418PSsaGDIurkWMJ588/Sph+jR068BotFopM0E
+XDaKnV6d7Ycatj3urElMNhM2zetrRw85oBsFugDf87sTLU17I/lEnadXpgp
cIcdtfVIPtLeW1V+gqKC/Qq8tHD66tzCKCBSgHh6AUsCkswsj+0XB28HQIf4
8hIYsJiuSsM7oqyv9LK+gv1xBVgorXPaAYx1o2B3XNXNhRtr4GmnQTytUATo
mZ3DYDCLXspWc5u2Gmxg0ypa9czRbp6apZkUZdEWMEI956fwcVk/bAzNi7gq
2nOADv6GfW0uHMCuYC0VUKq4BMIjYrfgxdVy1CKLMpEWxWxWWqXu4Q5v6tlq
Skh7e69I/nz3XiTUb98Kl75758F06lY6mWlTAzI9FnGxCSnUzF4WUwvIJQys
HCG0sf9YWdduAfGW8KwFos5AzDCdp2WBEhg45ML6JwGptXK2ubQNIgj4YAbo
B3aS3wGKltgNAPIcAXMe2CVQBHEN3yNZXNGuCGxFf4GE0AwgzHaNg2gL5ICh
DYLJEwJrC0xD5L9J3Z4DEV4BIooF4sgAr0xL47pLl5ER3mm5QlL7L5Bb1jZG
s6qIQa6tgTXOm3qBECxMWeqJaUGmXvP019pNzaWtznBZIKyas2t+GuAuGmWr
y6KpK+RgZGjrbJj2HF7TZbEocIsCr4HAJha91hM7NUAaHAKGR5wBRVyrYEE0
qkbOQ7wDRKW1S5waNH1rmXur2pNfp5yL+OeZAbnKlK6+AYTZyiI9pxYQChMx
f48m9RvrhsCN03MkyUueRe3NZg3u4FNQBw5ETg0Yu/9y79Q9QBTNYYNfAd6A
AU7wxXQsoBGgXC9BhQKGwkaD9cDkxjODx2dQn3pVkcigrS3vAEtdGaQubHKU
egpIg7/zGMAiP+B2rwFxJm46GYLYaYv5SyRnZ0fkm4z2hwLpVNWtrpdADgNs
sWp7RFP+ItFnWcOaAciyvAZSVNco+WD/OCWiBbSCLWhrISj5AJeFAdQsQR3q
xtDWAO6tNKsSGA8nAKabLeuCNy1wY9ECRyHLjlEApTIVeGtazFEmOtg8pU01
BRAgSElbGVgXUGVtfSoHb+XwKeMFMopU3l40As7TogqEdY1g3CvTAGcDIQ3u
HgVAXlngBmAqr1lYKIsqYKk0N1NkUSCx6+AGtkeU4aqPrYcRDl4vop9lKZAh
G401qDUgIRXKhbMmoWBNmF8ntmhIwDNoglPbLIqqLuuzaxb8F7CbYb+AShq8
eH1yOhjyf/XLV/T5+PA/Xz87PjzAzyc/7j1/Hj4oeeLkx1evnx/ET/HN/Vcv
Xhy+POCX4VudfaUGL/Z+GvCKBq+OTp+9ern3fIACpM3YAWUgkH3CkrCBXYkI
NA60Bi9whu98v3+kdx7rv4q99Tf69HTn68d/Q40hiKsrZEb6E6WYgj0HgpRk
FkhQUMdAwRJECexYd15fVRp1jedPYUshK+5FYG+HlMRtIiDOzQJoahqmCI6K
WxnAXtC+QVkyBQckEe+zwk1XzvEqSLuixQXaFQGmv9FofPdurI95JgWgrUrA
AMrKtSmz6XSYLp1FpTqcZ7nNFsTpkVleHz+D0YFJgdEV26UCI1izMBqgaYWT
ADI8dQii40PgqL2jZ2IvERTtGlL7MY0qnobVrGlg75dgqNGWns0KfAbkXBv5
GkzUdb/nPuyLLdgTD3YV+BJxf6MJaGbF2UIMC/5B7EbZS7ygID8QZUFagmUc
JeMUhF7cd/AOgitvkR1CD4Y5GKd+kgYdpVlN0vt+ZWnSB/qiApuUQcPB5FWg
Nap8EI2ooVYktB25sa0fUVQJjInwClTLNtjbQLoprgwUUr6y5GVmUFvi6kB3
aS3aKy4prHYW0YCChoS0oJxMJNB2jPmzpl4tkZTEE8EOo00XuSOXAUPAALiO
MOGZRSGHHjdKSpIPCJDsxpmeW9OuGjanexksh4wXwoCJoiXtQJZ5SRzHy0JO
CaxxP8XRAzHDEMlsRwJ04VFAEYtl0gEshWhk+IEo0KVMhwIUW0gs2XrV2mx0
Wn1xdo6uiAMbhV9jzhIyIVeisMB4h0VrFLxk5BdUejm5kaDw0c1BP68Qj33Q
ibEMbBrwuk7yfTJeGLH0A1szQsfCpRiWDaDJ8fGbp17axjNhYAzGRj9dT9H+
4AlBXYKhpAsM7KAhwT6YSb09UMIL2D+J9YA6hS2dyNMUIRrDiIJJ8kxIwrKx
s4GI8HWKVhygsXPYQiCMWZIQsOhvhK2HS0N34tKUxYxRhsI23xSJ4Fakzfca
8LZakNFIq7f3TPInPHHvHg90JERJn1agBfDx0bw4Q1cO1B0vLR0DqWN0314e
6x5yO9bQGBZg9ad7NhtMAlx8di7xrOT3oCQCk5xjnAhFlIpSB+x1cipCXATD
AKAfljOKKgRzDUcXqJBtkwHE312HDFgOxySvbs0iBFSwN8MzAUXBEkGZKxvV
T+ydkz78jANIJ5mWYG5aLdGSw7WrzuAkh48Cn4IUZqEio3nxiE8JuPwUPKSi
rCZvVuZFxp96oPZ6sYFWOsBH+hw9XZUJbPCO6jdguoI1Bqsl3wiGBw+3TTZU
vgwtkZ3yGmxXHZwY+BYtm+jFkzz1GFPqf8M/5fEm/zyo/h+DrL4c8b8vww+/
qF94cfqX9Dt5/5eR/yefvlS/8Ezp48l/wgR9U/F/6IcwqdJr/35JP3tAbhtP
aNK7nF743m+JvZhjzL/d1fe8oNAUp/72i4xdUqnyBfAged8jEGNn1beDqUWJ
MGBx1RFHQjTVz34kDemHE1bM7LG9WdYcHgrSAmW7sDKGSFbMUt7j7vGHvJAS
2XxZFzPPv2h2oV0rrms3ACI73O+6xBQizwLfFkdAyZulxAnIv/D7LdHNZMSH
9yjy4VZz0Gv4qArWkb6PAgl0/lBPQChdFbP2HNzGdjp+QO+BnGRche0pctoN
VWauApQTGB+3txgRQ1RDE3tuyrk3sKdh763RjFlnjWbCUR6zErDsl//sjXel
v+pxEXIjcJxoGaFtSskbpkQJBzIbpDrhRt2347PxUEK7frUPyE7ytkgq6l3H
kkeE8nBFdeH8aADGCoNM+XjoHTIHZNYNSsJsBnwkU3JpDNYHO3FACniKM4RR
xgBxYuUD+6VGo30DnFiB05BPSfhK0OI6C+sjP9ktHDeYJso1mkeJZSTm13Vu
eAUGrRvF2QsOGW4KW4x5TlaB4M6iv0MeH3AyKmvYrxSGPQczD8UURlOAHnqw
xeR1W1eWQlJbEwM4tsAwW6iUHEirAQIx2Do8Gj169OTxI3xj69Gj7Udb21vg
zm4Pxpq2ahsBCAZJ5jMp7+d7nEQWl4fcuREHjsLJmHVySzMlda14/LFW6hDk
3HXOwfQjCAZENKhhV08pjqhLINGQIsmFo9AkmWrBzFRLgxGhKgWCoUKrkn4k
YxLTVGD+cURa8gNIURxembYFSqyQWbJABIPJkKGYjlART/1smxAqU2RIdS0B
5hqD06JcGkkkwQf+ZO9bggK2gurBCNjJKwnIlxh+pQRZee0xwuiY1mUpUVj4
m3NDiiJ4mAtjvHeRiHO6xFzixxBtHMEpwP2ZmsAF+LiHP18OBpb9JMQ8JOv9
3zASAk8Sn8PnGG9KwcJROG7ZNhY3L9JHjHLxcJCOHErCsG9wiQG2QGtRN/MV
sCiSnvAipPMpB9jw03OLMWigiuR8UeH5rDPzz5CDrm8MxSjVANOKbndra+eb
h+Pt8cPxzqPdJ189fXzDdkK1wZ5PWDoicG4pc+DlPqC1oyJemDejvTNLMW0k
ZSULUFMQrxwWrVEFR08yOo9CSHqBUREmLDB4Nwe2RFMV1bVW9L3p2q3wYBYJ
SgZ8NhdGlTHBPsGoINsGKmyRxi7qSyuaAGNxNW0hbwM7sqNXDcBrmwYTFXWV
+ZRDIU0Flv+qpfoJSq+sRXVARUwtMP1sTMKbKUdZCRHhSj2rOOGA0npqaPKi
RSCBFQB2H53An6PTtzAgdoFvkQWW1jYYnsb/atWJT2O+gYfDONbcGleQm990
hhfmowQahuBajqprJTLL54pQU6L9x8k2rx1hDewB3bIIDqzjzh9dmesRWWkd
gH3aSNQFrNlhRUKq+03wepUGt3kSkBocZ5TNTYNKlkJSiCXm4UxyoaJTg0iT
AUoMMKtXEsX3BiYhVnIMLyl3UMRIAb6oWDeGfCSAT7ZAYqCwKkLLJ6Y7fL7W
W97zVTVlZYq7Xfy9JRXZMFheonulHi3wYF8qTkyFbGrCcXEZZLnA2IvijR9S
4kEoB5O0jKxUlkcPkuQiQ492NdviaJuwe6L1EU6zyTGkXzc7V7nLtMm1ok/e
odvoWOGn4M5tdCPxU3DmPgNcfu6+sTzMd4Qr+odxR3gPMWUDnvtG11B17Mzg
DLy95+wUExLtyCyLdz5BIErdV19kKQZmUFHPvQGoOjgdIS5DmkF0m/MhKhC1
EmyU+cDSAVeEphMTnGqokrDcpmBK0M2s2NaSHJw6U77wBWc4eHay/+rPh8c/
DfX+8eHe6eFQH73+/vmzkx+H+uT19yf7x8++h+9ev0z+gOcO2OM7PnwBL6ea
sOtXyaLG+hWmiouf8ScPpcS0Xuz9FGpxDGkb23onMQ/QhgA8YD2x9tMijyCq
WTWF5QGNvUZ81xtFdkFj9qHWRYOBowW0CHUQlGwdQ45GH3v348CntvT944MH
6m4psH7aCu28YQiKyGm2H6ZsUplLU5Q+ikBBX6/dAHRiV7bzyOgW+wLWDbBR
whwxTmP6gAswuWnpq/EVKPsR5oiqLYRbl7UwVGawM9yqAzdSt7FnBdbiZRPE
rZQAIe61R6AKCBzDXJ5AWTQZZL63FtkaZ/Hin6U1KwS4zJa2RksdaJmE4q8K
VtNtrcwMfmsLLk3JKeTjQ92BMqZQPUxBKXCpdiG6cNkaZX7bbxHV46VLwAFc
JnAgMmXf2Jl3CzS7Bez7sPWSOFjs8SiaCs2jnN7jTVEypGFN8Rxv1UfrMqVe
tIX2Y6gM5MHM63bkMZTHIGmHvr5p4p089FelrogAjHArjjyL7eC5CZX8uQTh
vQ3MxjoYpim70I93YZqyri8wtcaJHB5TODJEFNrrpdX3m/YBvjnAVBdKKPLz
iaeCTGA/QEZuEVDJXbImETeJ84oyNtIMaKK6Lt5elyCRL3XClzllVMZdfYwV
BF7qCN/EA8umvixmazPp3MRLUi9qTXT4tY718+ACM28Idb1iBW9z7WU02yQZ
jy9mTrRXtsjH68S/uriB/l3E+QV05x9L/s/vIz3JchjCevijjxMVFFQFv/rt
W7Qw+Il37x5wmQ6oMOINHhM8VfG2Rj5W8wPxYcRzZ87peQ2owj2GXpCYzFlA
Ia9QpLIgbRb1isU9r5uwqBxHVrPpvOOYcTIa2cTNksdK8OY9+XxdMOWVqahu
MqrYHMoxB/u8smYZMcfIVTRhOD/EVRluFx3MEJXFfKxYlaPvQsBfvbDteT3D
H//98BT+xh13KmUlMMCufvvl0r3bevslAfHu7b/+43/+y7vOc/rPpimobArH
WTq9++26+ZiKwPscPjDlA8ZaR8MmnBrep6KEetJyqWbuvA9jpUtAnUfZrhAQ
QDqlYj9HthF/SYUg6OzLLkHaJLDh2//AN/9zhZT+ocDwVgY87neUQ4aY4h/0
2JwfKzH0ZdD1alRqAugTsWAfj3c4V89i7AcSY4jApPxwK4lpKaZ/LLlJag99
dbU3LD2TBWYJJiLQ9GQ1Bf+QaPVwvP1EDwSEgYjxahMEwLPXZW1mfslcYJHU
eXMKngtdQS1Z14lbJYItSGulc+MtCGMOKw62lm5rEMaZgNWaaoU4CGerLRaK
NsBKjoIdiOAfwOIDzYPLfTzefqwHL0EO/ADbezbgeBAyAEsktImxOjZbxjU+
NcfnKUSsgdAUs3Ctz5Ouz7KtB98Dno759/55SKcuTMmh81AZzWpVZqCSpr45
XtYcnspytzDcqmzXQEvTtvrO/0RC5EnSu/z7hd5hzxSFit7qqoh/jeqVnvvu
O/+O7uyGjZyInvQHw/bHPyJoxPsy3x3eQT787g8R8j/02Ah/mLbfPt7WHwpb
9OJTI9778YdRF4dt7aWkty1u9uw/Hx9EXgAsIvlzm1Ce8HwA/+7KB2GeD4EN
+eDObBDmIU6YrhpU36gBiSmy9SAbPNn+cB7t4YNgnd/EDfTQb5cFNgiDgKzf
WSDOs5EF2Eb/SC7AXDLFsSSoJyb3mlczyRSzQcMjBILw8Ae9pit7FVxXdp0n
aZaTZxrrk5qSMlgEHXIkczr+gZHoJG4p51+4WiIPgU8kzlRgwNEn/4rKtQBb
rPDzBY7s/6kIqXdXg9MnUcmjV/B37iKxPcFurZg9PqzkE2KZLTmO+elOPNE7
DYgYb0AlAMTghLNgRZfFz+GwAsdQjg/Z0xcrMIsm0ZymOYuxQHqUhp/g6Ggq
8Yt44gXPwlZnmadCj4Z4WbqsPFZCto9PveW5vDxNOG3xfBq/ylv3QSdSoRJP
umNZAvViHTkHYHh1SXgmHFzEY2FkJDqyw6mciDJZIWndRw4alUIiIfnqdAiI
pAUVNGqGmpBbFGSH5fPEHgWSJFWSJBVgZMd5w0yLn5y5wZKc8U4yjMx5VS6O
j/4i2c/0hequwTMt8TST5Q4kYWObI0j+uIB7D+7MTyAQd8Z83ibJfZ/MJToD
hgGdP528eomf979/dZxPh1mBZ/Megq1DzGG77O0hZ8vakO4mz1wKvEIMwI+4
wqNWqmjjyROq9uWfsSaGYyR0pPCanJ8SXI4yZ7lQAtMNexg+TunATpeKXuIK
FfyzoT+6JiILz31yqoHc/ECOJGAiu/LduwdcTytcT3udPeNkw/kN5Q8WBfcV
HxiApzU9NxgxoMNgezIWwQKUEWHB6WL7xtCJspqOmGayImcu8eSA2g88JLK4
sOsld98Zxu8fTmCHzY3s4hMf/oHGLgnBWSUggdtYqmzK8iTB0WUfCv1nClSS
55Y6bkRlWWPkn4SeS3JqZUfzKhoKyJA7TEfviEUQISoVT6YjD94PcHUHwPc6
o1Gcw+RRA3oZzJ8dvc8LGnjUdmPFJHbTkXx4lqub5glZfXQFjyI+lyTI6Age
E4HoxryZg91AYg9JHBHbh44wLciTpl42VHf4ePzmTWdNHTUNA7qaz+rO2YFG
2bvXiTpwWUgIx81TQZ6Le8AJWjF2JrIWU5NYDdKvHEFyrU/F8SIvuiuK2hQt
1kx1Jw4MbsvC8z7mCymNgNVdikrVk21KecTTjrLKDB/KDvhiG3xdeVkT84ii
RKJtQcFgKc3iha2LB1mfl1emkvLQUiQAhSiA6uX1yHPKqaAgKZHk3Eiox6Gi
9MO9A2LAkF9NDpqjbJddCdJ5UbTErfNWAqhBZXhD2nBc6DSq5E8dSUXVuxZK
7UZS/9vEUN8rwnnEGgEf6p1K1OUHhEKF1psDoTt64IUgHUTHn+arkiVjYvO0
XHh7c8RvDFu4E9lbjxLCjK8rqfH7mabdkz94Qi+uFJ4QEgPkpgSdF6ZYdKYH
9NfOgI9WKRcWVF4Hc/fzx4TISkVvWg/+yAB/x65zDAp9hHM/6vzTqarTnR/7
5vHqa5dgZADX53lf2KJzH4na49ELx/6WozoZ/dghYXv6Ow6Feip+PiLmFExB
3Mrn+QDY0vXnIw/+CHI3IoLY+bPg4Iblewg/Dgfv/c4a84tLtXkDhCRs8Kpu
O9vkLRCObnn/6KakPce2pjG25YeIqXdpQhPPsSRRAp+zOnp9qkXfEGcsyCYI
p1Ddueo9zbLhoEwaovEziIvk/e1orZAdOE10ldFnxaWtou70JdlxchUd4+wo
VOp/9BRyi9PNGfUVJtcxUR0gyb04MoDTc8cyoHT5CZbp3k8qi7UszJtisVqs
xVzYlLxjzMUDH1y09UX2uUVK3KLHep+O60S3yA+IZy2mGMrEoFFWexSGVANK
N6bZxtSNmNXWSUlC4dpx3xg4wsNvwEauYXngYYhx4WgkaVAyJ76tsYtUyUeU
YycOxfEBfGQkj3BjiOR4wpqjyMsK/J+QPcb4kM2Ztcf+QXXLg+ihl4bKd+S8
e/ckiuoeXgm4Gsa/6dBqsfZuRJ9i9CHrDrnUvTTXmTcxJKiSRlWxium8KK3y
p+oxV12uYuOY5Iy9Ttst+O5P2KOoqFcOh1d+eEDvfjeQs5vTejPCsWYlxta5
cKqLfvKkfbH5lDuMmDAYUwKfT5ZJmx7ZTwX2W3e3xSWM/BqJmh335rg2yT0P
+Pou64TfAzXBAaLAQKzx4liIinsbz3PJr0mwrrJozBp0W6jCPh+fQ7wyiZom
0WPvOSeS1AcjWa6ETlLn1OHFT51wzFg98/ooxiFvDFcE0dKJtFB5U6fKLYug
DHUvHkLsCTHn7Bk1wByqUGBALaDguSz2IqGEceJK+HN+t7sU3J3Bz4ueSdG4
VgmXZSLkRoZOBEPUjszDqsPDHQ7Gx4sWD+8BHhihiZRIRTVp2JUjOc5DV0h/
cLPpUMrCUGle3/jvsUWo61KP8pC5kwhUKFuEgRRVkcS4+I+np0f6MYDu2xKi
wuhi01eQnZlmgu1m8oN0/Wf6pBSUQtwTPMYSGsfQIgGFqfSC2ZPnUdfOVL3q
UUkUtWp1abHABMOa2HSOCjYrDASHg1lqvdmAoKrTbCCGc7hOfu9AJ4Iz10t0
2tbAclw7svM51cELWbm2j863xrPdKumHQ3ZGUgvPRKZzZnz8rI1lpyZaPFVm
H+3FrVFkqYEwUcgMPEvKZbOwYBDVPnC4HuxbEyVKgnWJLA42UdgBOSVQyvlR
Sa4NQ+MNleLUh/LvMIK3qLoHAOeajtx2W9DcDQN3Wn4KJB3ZFUktdnY3VMoN
xLrw5LyExjRtuJfJY13rSVq8fPV4B6RjYLGUreLh/FPSER1596miia9Ph7+H
FG8LKe6BWZk07Ml9kDyweJxLpyy4L6mqTgOHdr3LDKaysCfRecg3rHk+HxKl
XGOiO4cpZZcN12wT1R3hMYwgbs0tI0gnn1872HlDxab0IOh6T92XwGsarLtN
WeGDtO5z6D/NUJaTqUaWeuiDlbYPYwoVTrCT5F9z/+oBh2vvYlyhcS/urOWq
9hijDbUW+THnENYFyjEAufLh8tEwj6oT90D6EfEBJ9+9ThrXJk65P4wBsnpd
2H3melKOOb4+TcOxg53tR4/GjwY6PPPdrxjO6gvPZfboWujuY8NmCWf1xMxE
gPxG48Up+YBFtwDqLbtOwd8CAYOjdgcC5lHWuLCPhW0tVnoz7X28tLoTF9y7
F+3v20OjSdmf62mYlrU3Ucm5wVeT0DNgk3G1dphzf61+L+vR5p20tGdft6IP
S02DhSkw+NigxAC29X1MoD/IwxW44BmbyqkgLKWRST2RruZ3DSX6CotQYDpQ
hrrHbzDdo9gXszu1TqRWJzQnlLKtvKmetD7F5m5pUKUnMBtXoNKIb0R2CJIl
gdqiv1QnC+D4ztc9D8bFYDPutGaNvYb894iNu7oLTN1ev0Cix8Us80GpoCSe
9kKvqsE7JqiRnjfLQv3CxA8BHD6VosCk0V5i/NOOiN4j24J34Jc7Ro0VGT7o
u2NDInLypbPJUAqkkuIVE4KTGYd1/XQcibumzLwLJyWKfopQmAiuK0JxbdMe
g4AfKayMjr1gOO2/Qo52J2RGYSMsCi/t7Iw5GjhpxRj2Edk4KtUGz7DDUh5h
AyoWZVp4Euzp6XTVeE/tblTYeaJfV7HgLi+gJLIUQAZfupTF+zZtuDRYi+Z1
5ZujSMjMaIU24UnSSybZetRXJdYQ9VVD5YtQaZTBC2LZD3wyLfNx84Npp76S
rcK2ZVivUbS9SRmTwYtkXcX+MFSZo6S4Kg06GS6aoisyEkE05DwWvcCGapBG
zZBbLasWbxHAQ5o3r37z4od+9ap/+Q+Hnm19s6AIhLBQZMVP4u53TmG+4jo5
/Fsg393+3fsP3v97e9U91LrpHGTmFQemHWo58RECYlzN+c/nHYNkG9wg2saZ
3OvIMHJuu05nn3vLTP4wa3MLpPX+qzQr8g29E/kbUjBeIkgtIvU8AfRVrUqj
e8ysLrFZ+seJHaNRYftmeGJAbco87vDo6XxhXBUFuT/i0bUrYvqZdV7aT3en
60pjYZFH2p3/9TllfX5GtOn6/IzO6+zm+ON64mYHQQQ8dmGr3f/6L93rqn2k
15Y5Y/nJLA/BzvZmZ+yjZ//0r0uz6M2vx8Kd1Mt8/yhH7+wvOTFyJ+Bvx/xO
BPbjURe920ye9Di2QX7f5tAmHZjEgO3zasmjdWm1T26v9ri0QzwRwvURXXd4
VUXhw7Kh5/1OH0W1T80BBbHiMMT8+Y3+cGdOdZNHLN1jQr4juMXeIJL7eKrg
I2MDQGrNinjfoVa5lhqE0vvHFt0rHzvsSDwTI8jGqY51KXZTQqBPnijhBhY9
ttPOrbbTr93WQn1mC+pX6Gvx3kZaL2vc2UxLdsQNhlo+1tdoO+nbh+Nh0jNI
/xQ239u3ySru0tkplWRBXinZRd/u+I6mchcQF298zuLjDRbKzi0WynvMkweG
c6XYjQt/fGS/Q64eRZjskZtUIWhCLKa4MarLEYf8uockzBf1VdBZiG4p5rtL
EFCuNXJ9TyJfbYgCvm9c1eeCB/rj46rKX/ryUXHVTxvHVJ80kKl+j2S+XyST
ipKyDCwYK+ojgpjUF1Tn8Uv1mQKYaUHQ+wQyGQpCzf8fI+63Eun63HbaextR
OU3ubD0xU/53jm+N0vgWXhVyo8HkctQlft/OUDHBfNvjo1BNmBa0h2fwDAc2
RiF5jdxMrT2NottKhBn9hVqdEmXWbX6CXzWcpNlw2GDR9IWTEjOpY7ZlP/6K
4aTBzvb21+OdwU0m3O/hpE8L/Me+/s/Idetsx5j/lFwXfQgvunqcB5RUtwXQ
uFf5e52UyzsndKLuqnN/yIEtbWuVuBF1bCORVmGyVu4FIFo8Cq3/hzJgNC4J
GrCbqFmKF9JrToX6BN0klOisjisRW1mIFQuC+S+ddkPhDhIq1ruWQTsnDNK2
FPH0hwoVKBHVa8Up0iNJDEOwEAAhXV0abc4bUsGPxg/Haecdf07AZd1znQoG
e0srZWi59XZ4LPaeQEuWrwiKKGKDMm+U/4lMyoPD54fUM+C3YlV+7vzpevX0
y7qy8MOxZ4mkWlp++gBLNCfmmi36UA/85s1sUeaJfwqrEy1FBDa3FVPrUPav
P8K8lvS7s4z3ltkHaKaOLpT9sEkZfsevfMAsH/BKp/BSpyJ9LcD2YbOkqtHT
qlc5Iru+180or/KuTOtXF2xSows6kSq3PeBe8V2Nh/G+Xd5CPWJG7k/O7wAO
SfK+OyH2uokknJ9qJSt9fJBJGNMBdb3RfTJEWALLmTQXsBEaHTv8xBbqgP5w
pjG9Wc6lbaJvhd2/ehpeTS+6Vh5a13kw9AKD4dZP2r/BgIhEvO/DN3e7nkTT
rVrhMLtpswHruWJLItzQwAgUqt9GgYSJ8vv2OvSQqytE++LlHH1XruDFEk1x
dsaXgBDXHYgKaQp7iWfjvnBek+DNmGv9/jVdAebbNzH28KAl6d+hGCj4+mKF
7a3p5GhyhYHEM9euMeioTN8V4cRaFS8uwOPs3btJWVd1LxriNbr+FfoFTq79
xfHggdOZ0NAobrFsr0P/c4kHboK5bxOSooaJ5Wp7qmRr+b4LASMiKlSY3A0p
fCNGBQ/ghfJ8aHuBTa0Iyp4rVfzZkTswMtm5q4ayyDM8AVryZaT6pLR2OfoL
HsoMcrBzZZBchIEa8cpcJ5cDy/1iWEqOo4TL1uJJ4SHe7kGyjZqw2+bsWs9W
xKLFrMRgalPUMyrCLlw41uu7vhMdz4t56w/MC9KbugyRcl9cZLxJk9jeHB03
JUDtRnILp5w5VsQ46e3YfH2M94eohUB+2FTWjLYsrhYbsIK5Ee9vzMx+4gs5
ahtC8p3LztNaIqP8oDLPMGumlqQrknRIPiA8RmtQfg2dtD5ForIrbRNCwVKe
Fxf2qnAfvI40MKboaDRJTKPXVsa3shu8fWbIVwTL2WjDQEbHgVqbpPSUSXGr
0+WeBElwoDLc8IV3KazC8dxw4wcq/5CGG9xgJjsABmZuSKgk1+mR04RNWJLr
n6WyosQmezF1k1W35efP6MSyT9D4Kgy+Dye0wJNNY1Rn2Lz6tpqFbAf86Qq8
OMBUlvIqKSEVDzvFECUK3KtzW6LJzdXP4dD0ImmAGEGm5S5xEyjvKtKVgud4
eJu3sE9VxaRZX3m0HCHRU9sQR4X7gkwr5Xcksz0AKoGgBiN/7fC+uNZJF4Hg
+ewjrfAA4TA5Qahi5xWycp4+2cGremlTdI4bcPlJxwCwulotJlxTo4BjYFon
LQrZ4CPzIF4dgzrheu1cigMkxn7AGZskwYA1KsgvhUsuemQpGA4zIm/RholH
WSNRQnlAdjMTnbHMsdYtuCRLVXXZNZYrUT176ENLmwGr33vYKN3MIi7oJLjv
TjGv5UpnPs1fxc7ggS7nWJJknOOud/cwwrGim3X38crhWWhR8fae/yX/oXsf
HihMKiilL5NbB4fcE7nHGbiLvuXE4F/shC5+QjLT0E++efqU+Q0x0cT1Or+K
ab4KshPwoiNvFTm+8tiwOkCEdu89TFtvowzYUDpXpWejnPKt4Vdoy7TM7ySl
5FY1eNxiuxhs/ENOcehVtKzxSAHeU7oHQgY/Y+8cvwn4bG566otuQ4/X2Uav
nhQY3iWNcs6AlVJh3hQFHvtG2CbCTC+0OcMUf5ty6CQIrVRkxr2aXKZKmzFZ
Jm5y6dYtWsjOkhY9pkSNhJ2OAAV46BYBPTh9fsJXxMEfC4tXwRdu4UJDEIXy
jQmCU9LjTDYpWEyvy420J3NFgXgySfraVo5ik+BynNFT1CcHO+nPWP/gd2Ch
tbGXCBqLhGV/S/0sWGbwk6Pr0eylwY4OaN0giEdo4jl43xcLhcY8KKhkJryC
uUHb31TT81q0j8kCMZ4ZMJZY1dUITOJLpKKYHXQsja4NP6txJvTQxc5f+Zt0
eq/6RFabrabYWR07x9gqnuT2ryqQO3iFsiVhLij1606v2Y63JtL9BFwsw1cV
K3+JpNylLnI2djnVzaoiHJECnJb1ajZCp38mpqkqqnlj4r3iXJPhb9UEPbEo
Kq9KPHXG+i9kbMrQKlzeTHwDssnliiGHPjODCW7y7qLF1LMIYReX8RF1xxZp
Q5egD9X6bCF0hr4MllaQdGCneAHGw4yYmwpVOtX1dFs7IIUm6jzTA+MYzbQC
9jGJMNVHCVblOA4x+2bQ8GcFPHpGuA+GarYyvn7OgeVowJxxfAOVjiylAkv5
C7HZpkk4N4GtNNe20ckrCmygy7qYUc9ivbf50SsSmORQ+vsHjT5bAUOAALD+
JtMOC5zLISxfsJWs1Ycs6AW1CcFRughrEEPjjmDcSnMBGUWmJdeAxJqHNMCp
czhT1PgoCkuoW6iCdr4t52xBRdDoVRDaimbHAiiwQSm3MGEfiRpBgyCnXJAw
IAlSFm900yufHHFbU0PFbaDKUXt7HG7FrAqaM3iVmKi2YJRuBf+Redt3EUys
PaYmMClgCj1RNoNVcHfOzhp7FrqX4LLioNIfiuycA+urjgRLfFUBynoSyMCC
Io7F60EOPasoSEbN+gruedkjW4cpDycitGZhnfLw8eH+qxcvDl8eHB70HANH
o2hpynoxKapiBJOCdWSWeNIdc0dAvDkIOawfT/ovrTFGONuzyWYB1YXqBZ5X
NwLbc0j96aOnX+Mhdc7i0b31yRC2mjbXbPOTaRL0n7eUCKLo1CjCPKbKJMei
6YKBo6iJ778AY3r3aO+n5w/EDqJyXLqdBHnkyPttwiZXjVkyWDhdiFGJVex9
o4IOsquOzPfei9QW5okhMtWTTt1ugWMDFK/5iCZ6A6bMXCt2XgyvfFUJcqw0
5ZGeenTfLfciEbDIlI3uKVvoz/Ze7q1b54WpjL973Bu3OsZ2sStZ9+IJCUEE
k/xULqf99oG8CMZ5aj2RQ5hGs0mrL3ErhY6t0rJfdiDO6s9HJA6Rv/gFHYIj
f67CwUM8KV++nYPFEH8hF8t9gVmHf9F7YUF/xp93tfyMvx3YcPR2V/rRhCva
3yFsf/1rhqu//Q3fOsbSQ7wUe7f/95fAjS7k/m4DM9x/dwu84blfD3C9Fwsy
2Q96ew+cAfeOrUe2Qp3spLK4EBVkqgv9o6nwQvtTB0brHJyKs6H+H+jZnJzb
cgLK70V9juexwV4ohuqIjsyAcayRw0/a+mKoT4uF/g8LpvsZvLqH18o4fdgU
F45y/f9eg86D10uDv8BwxcUFhhv+bmDb8MXxr0oz19/b5gwspMqbrUXDLhQi
mPYEi7fLwl7RxsFE2QSWqP4fH4UiGd+lAAA=

-->

</rfc>

