<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-07" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2019"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe Broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server, a client, or both.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>For some applications the client/server and request/response communication model
is not optimal but publish-subscribe communication with potentially many senders
and/or receivers and communication via topics rather than directly with
endpoints may fit better.</t>

<t>This document specifies simple extensions to CoAP for enabling publish-subscribe
communication using a Broker node that enables store-and-forward messaging
between two or more nodes. This model facilitates communication of nodes with
limited reachability, enables simple many-to-many communication, and eases
integration with other publish-subscribe systems.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 [RFC2119] [RFC8174] when, and only when, they
appear in all capitals, as shown here.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST API defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pub/sub):'>
  A messaging paradigm where messages are published to a Broker and potential
receivers can subscribe to the Broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a Broker and publications are delivered
by the Broker to subscribed receivers.</t>
  <t hangText='CoAP pub/sub service:'>
  A group of REST resources, as defined in this document, which together
implement the required features of this specification.</t>
  <t hangText='CoAP pub/sub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The Broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pub/sub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A Broker uses the topics to match subscriptions to publications. A reference to a Topic on a Broker 
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP Pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact
with a CoAP pub/sub Broker through the CoAP pub/sub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pub/sub Broker performs a store-and-forward of state update representations
between certain CoAP pub/sub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pub/sub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pub/sub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP Pub/sub Broker">

<t>A CoAP pub/sub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the Broker only needs to be
reachable from all clients. The Broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP Pub/sub Client">

<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub
REST API defined in this document. Clients initiate interactions with a CoAP pub/sub Broker. A data source
(e.g., sensor clients) can publish state updates to the Broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the Broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP Pub/sub Topic">

<t>The clients and Broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“/EP-33543/sen/3303/0/5700”.  The topics are hosted by a Broker and
all the clients using the Broker share the same namespace for
topics.</t>

<t>Every CoAP pub/sub topic has an associated link, consisting of a reference
path on the Broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations and a content-format specified in the link. A
CoAP pub/sub topic value may alternatively consist of a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format. Sub-topics are also topics and
may have their own sub-topics, forming a tree structure of unique paths that
is implemented using URIs. The full URI of a topic includes a scheme and 
authority for the Broker, for example 
“coaps://10.0.0.13:5684/EP-33543/sen/3303/0/5700”.</t>

<t>A Topic may have a lifetime defined by using the CoAP Max-Age option on topic 
creation, or on publish operations to the topic. The lifetime is refreshed each 
time a representation is published to the topic. If the lifetime expires, the 
topic is removed from discovery responses, returns errors on subscription, and 
any outstanding subscriptions are cancelled.</t>

</section>
<section anchor="brokerless-pubsub" title="Brokerless Pub/sub">

<t>In some use cases, it is desireable to use pub/sub semantics for peer to peer 
communication, but it is not feasable or desireable to include a separate node 
on the network to serve as a Broker. In other use cases, it is desireable to enable one-way-only communication, such as sensors pushing updates to a service.</t>

<t><xref target="brokerless"/> shows an arrangement for using CoAP pub/sub in a
“Brokerless” configuration between peer nodes. Nodes in a Brokerless
system may act as both Broker and client. A node that supports Broker
functionality may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
Broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pub/sub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pub/sub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pub/sub|---------|---------|pub/sub|
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="sec-rest-api" title="CoAP Pub/sub REST API">

<t>This section defines the REST API exposed by a CoAP pub/sub Broker to pub/sub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations
MAY support a subset of the operations as required by particular constrained
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pub/sub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pub/sub Broker MAY register its pub/sub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pub/sub API using CoAP Simple Discovery. A Broker wishing to
advertise the CoAP pub/sub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A Broker MAY
advertise its supported content formats and other attributes in the
link to its pub/sub API.</t>

<t>A CoAP pub/sub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pub/sub Broker wishing to advertise topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pub/sub Broker MAY provide topic discovery functionality through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pub/sub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>Topics in the broker may be created in hierarchies (see {create}) with
parent topics having sub-topics. For a discovery the broker may choose
to not expose the sub-topics in order to limit amount of topic links
sent in a discovery response. The client can then perform discovery
for the parent topics it wants to discover the sub-topics.</t>

<t>The DISCOVER interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for the DISCOVER operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the Broker resource. A pub/sub
Broker SHOULD use the value “/ps/” for the base URI of the pub/sub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pub/sub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-create" title="CREATE">

<t>A CoAP pub/sub broker SHOULD allow Clients to create new topics on the
broker using CREATE. Some exceptions are for fixed brokerless devices
and pre-configured brokers in dedicated installations. A client wishing
to create a topic MUST use a CoAP POST to the pub/sub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. Additional link target attributes and relation
values MAY be included in the topic specification link when a topic is created.</t>

<t>The client MAY indicate the lifetime of the topic by including the Max-Age
option in the CREATE request.</t>

<t>Topic hierarchies can be created by creating parent topics. A parent
topic is created with a POST using ct (Content Format) link attribute
value which describes a supported serialization of the CoRE link
format <xref target="RFC6690"/>, such as application/link-format (ct=40) or its
JSON or CBOR serializations.  If a topic is created which describes a
link serialization, that topic may then have sub-topics created under
it as shown in <xref target="create-sub-fig"/>.</t>

<t>Ony one level in the topic hierarchy may be created as a result of a CREATE
operation, unless create on PUBLISH is supported (see <xref target="sec-publish"/>).
The topic string used in the link target MUST NOT contain the “/” character.</t>

<t>A topic creator MUST include one or more content format link attribute values (ct) in the create payload. If the Broker does not support the indicated formats for both publish and subscribe, the Broker MUST reject the operation with an error code of “4.00 Bad Request”.</t>

<t>There is no default content format. If no ct is specified, the Broker MUST
reject the operation with an error code of “4.00 Bad Request”.</t>

<t>Only one topic may be created per request. If there is more than one link 
included in a CREATE request, the Broker MUST reject the operation with an
error code of “4.00 Bad Request”.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The Broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created.</t>

<t>A Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  A Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>A topic creator SHOULD PUBLISH an initial value to a newly-created Topic in order to enable responses to READ and SUBSCRIBE requests that may be submitted after the topic is discoverable.</t>

<t>The CREATE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for the CREATE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE of topic hierarchy" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- POST /ps/ "<parent-topic>;ct=40" ------>|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |            Location: /ps/parent-topic/        |
  |                                               |
  |-- POST /ps/parent-topic/ "<subtopic>;ct=50" ->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |       Location: /ps/parent-topic/subtopic     |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="sec-publish" title="PUBLISH">

<t>A CoAP pub/sub Broker MAY allow clients to PUBLISH to topics on
the Broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pub/sub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The Broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The Broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A Broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format value from the header of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t><xref target="create-publish-fig"/> shows an example of a topic being created on first
PUBLISH.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
Broker accepts PUBLISH using POST it shall respond with the 2.04 Changed
status code. If an attempt is made to PUBLISH using POST to a topic that does
not exist, the Broker SHALL return a response status indicating resource not
found, such as HTTP 404 or CoAP 4.04.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSCRIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>.</t>

<t>If a client publishes to a Broker without the Max-Age option, the Broker MUST
refresh the topic lifetime with the most recently set Max-Age value, and the 
Broker MUST include the most recently set Max-Age value in the Max-Age option of 
all notifications.</t>

<t>If a client publishes to a Broker with the Max-Age option, the Broker MUST
include the same value for the Max-Age option in all notifications.</t>

<t>A Broker MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for the PUBLISH operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a Broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pub/sub Broker MAY allow Clients to subscribe to topics on the Broker
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pub/sub Client wishing
to Subscribe to a topic on a Broker MUST use a CoAP GET with the Observe
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the Broker can supply the requested content format. The Broker
MUST reject Subscribe requests on a topic if the content format of the request
is not the content format the topic was created with.</t>

<t>If the topic was published with the Max-Age option, the Broker MUST set the Max-Age option in the valid response to the amount of time remaining for the value to be valid since the last publish operation on that topic.</t>

<t>The Broker MUST return a response code “4.04 Not Found” if the topic does not 
exist or has been removed, or if Max-Age of a previously published 
representation has expired.</t>

<t>If a Topic has been created but not yet published to when a SUBSCRIBE to the 
topic is recieved, the Broker MAY acknowledge and queue the pending SUBSCRIBE 
and defer the response until an initial PUBLISH occurs.</t>

<t>The Broker MUST return a response code “4.15 Unsupported Content Format” if it 
can not return the requested content format. If a Broker is unable to accept a 
new Subscription on a topic, it SHOULD return the appropriate response code 
without the Observe option as per <xref target="RFC7641"/> Section 4.1.</t>

<t>There is no explicit maximum lifetime of a Subscription, thus a Broker may 
remove subscribers at any time. The Broker, upon removing a Subscriber, will 
transmit the appropriate response code without the Observe option, as per 
<xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the SUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the Broker, with a subsequent
notification. The subscribe response from the Broker uses the last
stored value associated with the topic1. The notification from the
Broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pub/sub Broker allows clients to SUBSCRIBE to topics on the Broker,
it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for the UNSUBSCRIBE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pub/sub Broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the
topic was created with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the Broker can supply the requested content format.</t>

<t>If the topic was published with the Max-Age option, the Broker MUST set the 
Max-Age option in the valid response to the amount of time remaining for the 
value to be valid since the last publish operation on that topic.</t>

<t>The Broker MUST return a response code “4.04 Not Found” if the topic does not 
exist or has been removed, or if Max-Age of a previously published 
representation has expired.</t>

<t>If a Topic has been created but not yet published to when a READ to the topic is 
recieved, the Broker MAY acknowledge and queue the pending READ, and defer the 
response until an initial PUBLISH occurs.</t>

<t>The Broker MUST return a response code “4.15 Unsupported Content Format” if the 
Broker can not return the requested content format.</t>

<t>The READ operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub
REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
</list></t>

<t>The following response codes are defined for the READ operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pub/sub Broker MAY allow clients to remove topics from the Broker
using the CoAP Delete
method on the URI of the topic. The CoAP pub/sub Broker MUST return
“2.02 Deleted” if the removal is successful. The Broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed.</t>

<t>When a topic is removed for any reason, the Broker SHOULD remove all of the
observers from the list of observers and return a final 4.04 “Not Found”
response as per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE operation is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  {+ps}/{+topic}</t>
  <t hangText='URI Template Variables:'>
  ps := Pub/sub REST API entry point (optional). The entry point of the pub/sub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for the REMOVE operation:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP Pub/sub Operation with Resource Directory">

<t>A CoAP pub/sub Broker may register the base URI, which is the REST API entry point for a pub/sub service, with a Resource
Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.</t>

<t>A CoAP pub/sub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pub/sub topics. A pub/sub
Client may use an RD to discover pub/sub Topics. A client which
registers pub/sub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pub/sub Broker.</t>

<t>A CoAP pub/sub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pub/sub Broker. See
<xref target="discover"/> in this document.</t>

<t>The pub/sub Broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pub/sub Broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the Broker, allowing the Broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the Broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the Broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the Broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the Broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the Broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the Broker is unable to serve a certain client that is sending publish 
messages too fast, the Broker SHOULD respond with Response Code 4.29, “Too Many 
Requests” <xref target="RFC8516"/> and set the Max-Age Option to indicate the number of 
seconds after which the client can retry. The Broker MAY stop creating 
notifications from the publish messages from this client and to this topic for 
the indicated time.</t>

<t>If a client receives the 4.29 Response Code from the Broker for a
publish message to a topic, it MUST NOT send new publish messages to
the Broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pub/sub Broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the Broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub Broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since Brokers terminate the exchange. While running
separate DTLS sessions from the client device to the Broker and from
Broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
Broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate Broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The Broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pub/sub Broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.
An example application that uses the CoAP pub/sub Broker and relies on 
end-to-end object security is described in <xref target="RFC8387"/>. 
When only end-to-end encryption  is necessary and the CoAP Broker is 
trusted, Payload Only Protection (Mode:PAYL) could be used. 
The Publisher would wrap only the  payload before sending it to 
the Broker and set the option Content-Format to application/smpayl. 
Upon receival, the Broker can read the unencrypted CoAP header 
to forward it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="sec-rest-api"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='https://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference  anchor="RFC8516" target='https://www.rfc-editor.org/info/rfc8516'>
<front>
<title>&quot;Too Many Requests&quot; Response Code for the Constrained Application Protocol</title>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2019' month='January' />
<abstract><t>A Constrained Application Protocol (CoAP) server can experience temporary overload because one or more clients are sending requests to the server at a higher rate than the server is capable or willing to handle.  This document defines a new CoAP response code for a server to indicate that a client should reduce the rate of requests.</t></abstract>
</front>
<seriesInfo name='RFC' value='8516'/>
<seriesInfo name='DOI' value='10.17487/RFC8516'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-core-object-security">
<front>
<title>Object Security for Constrained RESTful Environments (OSCORE)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='March' day='6' year='2019' />

<abstract><t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE).  OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.  Although being an optional functionality of CoAP, OSCORE alters CoAP options processing and IANA registration.  Therefore, this document updates [RFC7252].</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-object-security-16' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-object-security-16.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='June' day='27' year='2018' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-03.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter van der Stok'>
    <organization />
</author>

<author initials='C' surname='Amsuess' fullname='Christian Amsuess'>
    <organization />
</author>

<date month='January' day='11' year='2019' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which contains information about resources held on other servers, allowing lookups to be performed for those resources.  The input to an RD is composed of links and the output is composed of links constructed from the information stored in the RD.  This document specifies the web interfaces that a Resource Directory supports for web servers to discover the RD and to register, maintain, lookup and remove information on resources.  Furthermore, new target attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-19' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-19.txt' />
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC8387" target='https://www.rfc-editor.org/info/rfc8387'>
<front>
<title>Practical Considerations and Implementation Experiences in Securing Smart Object Networks</title>
<author initials='M.' surname='Sethi' fullname='M. Sethi'><organization /></author>
<author initials='J.' surname='Arkko' fullname='J. Arkko'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<author initials='H.' surname='Back' fullname='H. Back'><organization /></author>
<date year='2018' month='May' />
<abstract><t>This memo describes challenges associated with securing resource- constrained smart object devices.  The memo describes a possible deployment model where resource-constrained devices sign message objects, discusses the availability of cryptographic libraries for resource-constrained devices, and presents some preliminary experiences with those libraries for message signing on resource- constrained devices.  Lastly, the memo discusses trade-offs involving different types of security approaches.</t></abstract>
</front>
<seriesInfo name='RFC' value='8387'/>
<seriesInfo name='DOI' value='10.17487/RFC8387'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

