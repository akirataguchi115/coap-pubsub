<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-02" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2017"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server or a client.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>This document specifies the means for nodes with limited reachability to
communicate using simple extensions to CoAP. The extensions enable publish-subscribe
communication using a broker node that enables store-and-forward messaging
between two or more nodes. Furthermore the extensions facilitate many-to-many
communication using CoAP.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words ‘MUST’, ‘MUST NOT’, ‘REQUIRED’, ‘SHALL’, ‘SHALL NOT’,
‘SHOULD’, ‘SHOULD NOT’, ‘RECOMMENDED’, ‘MAY’, and ‘OPTIONAL’ in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST interfaces defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pubsub):'>
  A messaging paradigm where messages are published to a broker and potential
receivers can subscribe to the broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a broker and publications are delivered
by the broker to subscribed receivers.</t>
  <t hangText='CoAP pubsub service:'>
  A group of REST resources, as defined in this document, which together implement the required features of this specification.</t>
  <t hangText='CoAP pubsub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pubsub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A broker uses the topics to match subscriptions to publications. A topic
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP pubsub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pubsub service. CoAP pubsub Clients interact
with a CoAP pubsub Broker through the CoAP pubsub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pubsub Broker performs a store-and-forward of state update representations
between certain CoAP pubsub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pubsub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pubsub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pubsub         Broker
+-------+         |
| CoAP  |         |
|pubsub |---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pubsub |
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pubsub |---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP pubsub Broker">

<t>A CoAP pubsub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the broker only needs to be
reachable from all clients. The broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP pubsub Client">

<t>A CoAP pubsub Client interacts with a CoAP pubsub Broker using the CoAP pubsub
REST API defined in this document. Clients initiate interactions with a CoAP pubsub broker. A data source
(e.g., sensor clients) can publish state updates to the broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP pubsub Topic">

<t>The clients and broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“EP-33543/sen/3303/0/5700”.  The topics are hosted at the broker and
all the clients using the broker share the same namespace for
topics. Every CoAP pubsub topic has a link, consisting of a reference
path on the broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations with a content-format specified in the link. A
CoAP pubsub topic value may alternatively be a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format.</t>

</section>
<section anchor="brokerless-pubsub" title="Brokerless pubsub">

<t><xref target="brokerless"/> shows an arrangement for using CoAP pubsub in a
“brokerless” configuration between peer nodes. Nodes in a brokerless
system may act as both broker and client. The Broker interface in a
brokerless node may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pubsub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pubsub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pubsub |---------|---------|pubsub |
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pubsub |---------|---------|pubsub |
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="function-set" title="CoAP pubsub REST API">

<t>This section defines the REST API exposed by a CoAP pubsub Broker to pubsub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pubsub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations 
MAY support a subset of the operations as required by particular constrained 
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pubsub Clients discover CoAP pubsub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pubsub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pubsub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pubsub broker MAY register its pubsub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pubsub API using CoAP Simple Discovery. A broker wishing to
advertise the CoAP pubsub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A broker MAY
advertise its supported content formats and other attributes in the
link to its pubsub API.</t>

<t>A CoAP pubsub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pubsub broker wishing to advertize topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pubsub Broker MAY expose the Discover interface through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pubsub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>The DISCOVER interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  /{+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the broker resource. A pubsub
broker SHOULD use the value “/ps/” for the base URI of the pubsub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pubsub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="create" title="CREATE">

<t>A CoAP pubsub broker MAY allow Clients to create new topics on the 
broker using CREATE. A client wishing
to create a topic MUST use CoAP POST to the pubsub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. The client MAY indicate the lifetime of
the topic by including the Max-Age option in the CREATE request.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created. Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>Topics may be created as sub-topics of other topics. A client MAY
create a topic with a ct (Content Format) link attribute value which
describes a supported serialization of the CoRE link format
<xref target="RFC6690"/> such as application/link-format (ct=40) or its JSON or
CBOR serializations.  If a topic is created which describes a link
serialization, that topic may then have sub-topics created under it as
shown in <xref target="create-sub-fig"/>.</t>

<t>The CREATE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  /{+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" -------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE sub-topic" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------- POST /ps/ "<mainTopic>;ct=40" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |             Location: /ps/mainTopic/          |
  |                                               |
  | --- POST /ps/mainTopic/ "<subTopic>;ct=50" -->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |        Location: /ps/mainTopic/subTopic       |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="publish" title="PUBLISH">

<t>A CoAP pubsub broker MAY allow clients to PUBLISH to topics on
the broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pubsub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format of the payload of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
broker accepts PUBLISH using POST it shall respond with the 2.04 Changed 
status code.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSRCIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>. If a client
publishes to a broker with the Max-Age option, the broker MUST include
the same value for the Max-Age option in all notifications. A broker
MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  /{+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pubsub broker MAY allow Clients to subscribe to topics on the Broker 
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pubsub Client wishing 
to Subscribe to a topic on a broker MUST use a CoAP GET with the Observe 
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the broker can supply the requested content format. The broker
MUST reject Subscribe requests on a topic if the content format of the request
is not supported by the content format the topic was created with. The broker
MAY accept Subscribe requests which specify content formats that the broker
can supply as alternate content formats to the content format the topic was
registered with. If the topic was published with the Max-Age option, the
broker MUST set the Max-Age option in the valid response to the amount of
time remaining for the value to be valid since the last publish operation
on that topic. The Broker MUST return a response code of “2.07 No Content”
if the Max-Age of the previously stored value has expired. The Broker MUST
return a response code “4.04 Not Found” if the topic does not exist or has
been removed. The Broker MUST return a response code “4.15 Unsupported Content
Format” if it can not return the requested content format. If a Broker is
unable to accept a new Subscription on a topic, it SHOULD return the
appropriate
response code without the Observe option as per as per <xref target="RFC7641"/>
Section 4.1. There is no explicit maximum lifetime of a Subscription,
thus
a Broker may remove subscribers at any time. The Broker, upon removing a
Subscriber, will transmit the appropriate response code without the Observe
option, as per <xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  /{+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful subscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the broker, with a subsequent
notification. The subscribe response from the broker uses the last
stored value associated with the topic1. The notification from the
broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pubsub broker allows clients to SUBSCRIBE to topics on the broker, it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pubsub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  /{+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pubsub broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the topic was created with.
The broker MAY accept Read requests which specify content formats that the
broker can supply as alternate content formats to the content format the
topic was registered with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the broker can supply the requested content format. If
the topic was published with the Max-Age option, the broker MUST set the
Max-Age option in the valid response to the amount of time remaining for
the topic to be valid since the last publish. The Broker MUST return a response
code of “2.07 No Content” if the Max-Age of the previously stored value has
expired. The Broker MUST return a response code “4.04 Not Found” if the topic
does not exist or has been removed. The Broker MUST return a response code
“4.15 Unsupported Content Format” if the broker can not return the requested
content format.</t>

<t>The READ interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  /{+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Topic exists, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pubsub broker MAY allow clientsremove a topics from the broker
using the CoAP Delete
method on the URI of the topic. The CoAP pubsub Broker MUST return
“2.02 Deleted” if the removal is successful. The broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed. When a topic is removed for
any reason, the Broker SHOULD return the response code 4.04 Not Found
and remove all of the observers from the list of observers as per as
per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  /{+ps}/{+topic}{?q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP pubsub Operation with Resource Directory">

<t>A CoAP pubsub Broker may register the base URI, which is the REST API entry point for a pubsub service, with a Resource
Directory. A pubsub Client may use an RD to discover a pubsub Broker.</t>

<t>A CoAP pubsub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pubsub topics. A pubsub
Client may use an RD to discover pubsub Topics. A client which
registers pubsub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pubsub Broker.</t>

<t>A CoAP pubsub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pubsub broker. See
<xref target="discover"/> in this document.</t>

<t>The pubsub broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pubsub broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pubsub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the broker, allowing the broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the broker is unable to serve a certain client that is sending
publish messages too fast, the broker MUST respond with Response Code
4.29, “Too Many Requests”. This Response Code is like HTTP 429 “Too
Many Requests” but uses the Max-Age Option in place of the
“Retry-After” header field to indicate the number of seconds after
which to retry. The broker MAY stop creating notifications from the
publish messages from this client and to this topic for the indicated
time.</t>

<t>If a client receives the 4.29 Response Code from the broker for a
publish message to a topic, it MUST NOT send new publish messages to
the broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pubsub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pubsub broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pubsub broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since brokers terminate the exchange. While running
separate DTLS sessions from the client device to the broker and from
broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pubsub broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.</t>

<t>When only end-to-end encryption is necessary and the CoAP Broker is
trusted, Payload Only Protection (Mode:PAYL) could be used. The
Publisher would wrap only the payload before sending it to the broker
and set the option Content-Format to application/smpayl. Upon
receival, the Broker can read the unencrypted CoAP header to forward
it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters
Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="function-set"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="function-set"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="response-code-value-207" title="Response Code value ‘2.07’">

<t><list style="symbols">
  <t>Response Code: 2.07</t>
  <t>Description: Add No Content response to GET to the existing definition of
the 2.07 response code.</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: The server sends this code to the client to indicate that the request was valid and accepted, but the responce may contain an empty payload. It is comparable to and may be proxied with the http 204 No Content status code.</t>
</list></t>

</section>
<section anchor="response-code-value-429" title="Response Code value ‘4.29’">

<t><list style="symbols">
  <t>Response Code: 4.29</t>
  <t>Description: This error code is used by a server to indicate that a client
is making too many requests on a resource.</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='http://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='http://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='http://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='http://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='http://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.selander-ace-object-security">
<front>
<title>Object Security of CoAP (OSCOAP)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='October' day='11' year='2016' />

<abstract><t>This memo defines Object Security of CoAP (OSCOAP), a method for application layer protection of message exchanges with the Constrained Application Protocol (CoAP), using the CBOR Object Signing and Encryption (COSE) format.  OSCOAP provides end-to-end encryption, integrity and replay protection to CoAP payload, options, and header fields, as well as a secure binding between CoAP request and response messages.  The use of OSCOAP is signaled with the CoAP option Object-Security, also defined in this memo.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-selander-ace-object-security-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-selander-ace-object-security-06.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='March' day='13' year='2017' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-00.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter Van der Stok'>
    <organization />
</author>

<date month='March' day='13' year='2017' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which hosts descriptions of resources held on other servers, allowing lookups to be performed for those resources.  This document specifies the web interfaces that a Resource Directory supports in order for web servers to discover the RD and to register, maintain, lookup and remove resource descriptions.  Furthermore, new link attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-10' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-10.txt' />
</reference>



<reference  anchor="RFC5988" target='http://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIABLUWlkAA+1d63YbOXL+j6fAkX/YzpKUZHtu2p1JZEmT1a4taSV5N5vL
yWmSINWrZje30bTM8Tjvk+fIi6VuuHU3JfmSueRYZ85YIruBQqFQ9VWhUBgO
h8o2WTn9z6yoSrOnm3plVL6s6TfbPNnZ+WbniZpWkzJbwNfTOps1w9w0s+Gk
qg38L1sOl6uxXY2H8Nwka/a0baZqme8prZtqsqcfro19yH9Ui2U2aZKPpmbZ
XMEnT+XvvJyaMnrErhe1mdnog6pu0k+g2QW8E32Sl0WOg/HvNHVO/ZaVvCB0
8N9AfPpRkzcFvH62Ghe5vRpewPgmdT42+nldXZtaz6paN1dGH1QlNJ1BX1O9
v1wWOYw/r0p9Vlc42kI/Oqj2zx6rbDyuzes7GsRH1fXNnj4uG1OXphkeIrPV
NGuAlic7u1+pbNVcVfWeGsIIYbgvR/qP8F9l4XkYBs/Qy3xylZkifFzV8z19
scjq5vIqL+cWPjKLLC/8oyN+9J8sPtPQMyPgh+tln3sxdVaa0nezX+fRZ9TH
ETDZ2qoMHWR1Prrmh/7JyLdx038Y0X/54n/+uzQ/+Lb/kOULE3+8ofm/4XOj
v8H/4LG0g7KqFzAXrw2K4fn3B0+/+fpL+fXJ7u438uuXX36z43794iv361df
Ptt1vz754smeystZ3Nzx8HBkTQGLxtTDbGKG1fhvZtIMrZms6rxZu2eWsKQW
47zM6aF4pSzrapYXvrGwnGpjq1UNT0/zGpqs6rUQ8sU3X3+9p9RwONTZGGVu
0ih1eX8RHGggV9dAdQMPmjeNKS08ZmGKDMwF/Dk1U9VUsBaWS1hhepFNQBLM
sKmG8iuts1XpOshLWJsgNwurb64MtALqAyZKL2AcwP6p4bbdiOBtT+gAX16C
sOWTVZGx9BfVjV5WN7AWbmDohbFWW6CxqhWshJuqvrYjDfJrNaiiFS53PTUz
aAx60UtZVtYvq3G6rGCxZo2iUU8trdxJtszGeZE3ObRQzfgpfFzGD4tA8yBu
8uYKqIO/YQ1n1xZoVzCWEqYnfw2zjYzdhhdXy2GD4siTtMin08Io9QBXc11N
VxNi2tsHefTnu/eaQv32rUjku3eOTKvunKdsUlfATMdFHGw0FWpqXucTA8wl
DqwsMbQ2f18Z22zD5C3hWQOTOgWVwvM8KXLUtiAh18Y9CUytlDX1a1Mjg0AO
YG3AZ+57oKIhcQOCnERAn4dmCTOCvIbPcVps3qyIbEV/gTbQTCD0tsZGtIHp
gKYzJJM7RKHLhCrg/ilwIF8gczIQkkmR2faYpUkkdFKscI7dBygmnRVRr0qS
jLXJYHCzulpg14usKPQ4a0BxrgdIwnit7SR7bco5jgc0Uj1f89NAcF4rU77O
66pE0UVJNtb4bq/gNV3kixzXJggZaGWSzbUem0kGc4JNQPPILJgK2ygYELWq
UeSQ4UBRYcwSuwZz3hgW27Jy865jkUXGc8/AVZUVtrqFhOnK4ERODDAUOmLB
Ho6rN8YOQAwnVzgXJ9yL2p9Oa1y6l6DzLeiaCjj26GT/0j5GFs1gZd8A32Dm
L/DFuC2YI2C5XoKdBA75FQbjgc4zJwWOn95G6lVJuoLWtLwDsnST4ezC6kZ1
p2Bq8HtuY4SLLtYjwNZJPssNN7IwQDnNd7z8+xgDEh9WmoGlQ8wH0StMrGCB
fFxaNOfx56bMxvBkR3epdPlys5nTaEgUiym/D1qyQcMBSmgIRN9kNUgIMCRD
KVRjmBYDXIXJcaqZhzXS369qXEj0UZNSNssmOEIc1CIr16xaynUvYTQ0hXru
EhrLy6qo5mtWa9cgsiAUoHAfvnx1cflwwP/qk1P6/fzoT6+Oz48O8feL3++/
eOF/4ScU/HH66oV8j7+FNw9OX748Ojnkl1/u//Uhm7eHp2eXx6cn+y8e4pIA
JGOVTK7ThTXJ8pgXeA3ChrOaoQJg5k/xRdKziBLevXPCkjaDSg1E2aI8TFHj
cZuzbAF8y2qWGdQPyFjoB0wkkIcyPQG0G6mZaW4nK2ujbtHOg3rH0dDfiFCA
DH3OPSl7Va0KIBnXbKfLpDvtu4t7UbER4V7uQiDYPc7nq/NjaB3EGwRDMSAS
GgE6QWvAphV2Asxw7CSKzo9g0onfIFikbGekhXNU8m3e9jMcTQ21rlnxwfos
ADDQyphOc3wmK2joIoEAlbpY+xGjr8d7CuBrWCWIRLJpPl+IfeMvBL7I8uRh
+VWIjFtWsGBAwRQA0IBTJifbN8lKHWAIvIPUyltkDulB3wdz1nVSIzafgs6u
Gv2oNNTpY31dAjRi0lhB0asw42iAYOGivlyBtK0RMIEH07gWmXnYJtIrVC0b
D/tgAic4MlCP6ciil1lMTYGjA02qtejSMCQ/2mlgA2oEwhPMcTLUoHqZ8fO6
Wi1xIkkwPBoY8Dp0skHL1yvpATAAnBXob27I/pOaJfWN1MiCnOqZyZpVzZCu
V7gSstj5YqoES5B+JXBYkLDxkFBKvFg8ivnzWAABMpihDPDIPwrsqYhcUrqs
pKhl+IK4356VFvfJlY3AVLVqTNI6DT6fXyEatmAt+TWWKpkilEhUF+heG8RF
4JShrKDZSKcaJxN+tTPALStkYx91gtdARD1bO9N9QFiM+UqfMziTOcxtzGCR
fU3Q262baglOo3TqhYKZ0T+rl9Uyn3CHYKEAcuocwwho1tkLyGJ/A2z5ApYO
rX2/vgXGB3GmeMQIWhRGEjYmFYud2U1zCB/HXMUG6AUkH0Hr66zIp8wW1Kip
0EfaWZFV3a8B0zegiHE63j7Ioj/hiQcPdMz3+GEFmh6fHs7yOfoLV9UNUx83
gROQ6Z6VOtLd+bSsxNHzZAOnu2sJegAhnV9JdCR8TWt9/+w4yMAVBh1Q+RDU
59cBFxLs8A43+pmg+JdTcls9nMHGhSYUyqgBcag6dIFAYZPkNXQAE3CBQTN3
BIsekAEqU1mFrl+HgXt4M/IEXSTan0VltURMiiNXrbZJv555IQTtygpDWnN6
D58SavkpeEg99zqYnCXpF6V64oja7+MFulJjw8Ya/SiVKGKA4NUbcGkAG8FY
CYBD6+BGNdFiSUehJW5QrFVO/h07jfApwpbgI5KqdAxT6r/gRzm2yY9Q6n6Y
YvWbIf/8xn/xo/qRh6Z/jD+T138cuh/57TfqR+4ofjz6x3fQ1xX/Q1/4TpXu
/PwY/+4Iuas9mZLe4fTS935D7OUcM/7tnn7gFISmgOe3Dzcpk4cggOTgDUF5
zctvtyYGVcEWK6kHPUKmVK/okQakzy/Y3rIr82ZZceDBqwnU2SLF6IOvWJyc
S9cT8XG6SXTu6yqfOtlFJIWAVTOkbXvYsrbdgovQTVWCocS3BeErebMQRxQh
vl9qkckldO7fI9farmZgr/BR5RGPfoSqCEz5QI9BHd3k0+ZqoE0zGT2m90BB
Mq/80hTtbAcqQaBA5Rjax6Ut2GCAAZWxucqKmYPME7/u2jPGYtOeMREmx1fx
hHuVPruCLZWv/FxuAnWjyLDIvMaz2NfhWMzEvgZFDaqc2KIemdF8NJB4oRvo
Y0I+Dl7E+t22cDnykpvLy2vrWgMqVhjASNtDj48nPwEsqACTHvARFfoYJYE9
F0HDBimKJp7NGHS/pzjC7CB5MQw0b0AIS3AB0i6JXRFbbGtgPTNPsIm99Ulk
TwPgibCOAKp1CqW8aFa14jA4R6O6C5SDxSPuk+0eeKjovJD3BjKMBhpWKoX2
rgC4oXYCQ4TTobe2eXbt9g1AfLCQ2+MMWAz+e72NpsiCltpCIraOzoZPn37x
7Cm+sP306c7T7Z1tcFB3tkaa1mgT+hcIkjUtaVDOd3dMCQIuD9mrTNwxilHi
toVdZhMy0op7GOkjUHDrhN/0DSgEHGEBczKgsGRuKc5FWKw2sIwNOO5qCcN0
YdFxvM4QNdKXBBZxYwPwHYc3JcqMc4jNq6xpgPcrlI4kmsCUMTWokq2tJhQq
YyH6wdQ+XqQILrUtvl+c0C8qoaHEA1wsTRa7ITJA+FWXC4CDVxLWLTCWR9sr
BSETbLYoJJQHbOGdBUWxKtw+YQa3mYdd2QgN8WPILg6/5OC5TBhHroX/jux0
FLJQWLlRdFE0GkDqsf/Qg2r0r+oaFyT5o2hoQmzMjRkXhdoKb29hn2B5V+zn
eDO0NM5bHOkTCkDScgovKl5HPh4OskRqI9JlEgonaXd214VfmJDQHDu8ggiX
tKHLZDlZcAog2GlvhRRvKflofswwPwxSctD2In/jmhRvEOckimrKSGV49OBs
BeuQSCeHkC02zg4jGK3PsJsN0JG+3Ay/UlC1CXzRbw7ybYRe+JsHfBuBJv7m
4d7PQJfru68tR/M96QoIMpIkwZCdZXMreFQP+t3Etw9mq5IUwNCa5p2LCopO
cFt/PryIr7B0yuruc00rt469zyYx+QyDSdb5rtWqkSiD9AbqEfAKdSaGmrbq
I199g6Plg1RsPTphTQ5rK7flih0cHl8cnP756PyvA31wfrR/eTTQZ6+evzi+
+P1AX7x6fnFwfvwcPnt1Ev0Bzx0yIjw/egkvx+GTNvaSMY306bLJF/kP+JWj
Ul5RL/f/6reBM8IgpnEoMo3M+Lgb8DwCBfFem0KWTTKA9yPSqn6AMMUYmK7A
FL3rCx9x3Bq/7mGtxR4jLXtBg1CH8sZaVyEUAV6FAymHLqatH50fPlb3i333
Tq1MnbMpOgd62UBCNxTme53lhXMyUIj8ThxQTqLK+zpkp8VowaiBtGUFKg/5
TW2KMwbyDQoYPxndmKIYYlC43EaqdVGJOCUmnqlWCW7WOLO1meeY7hE3H9ZQ
RIFYeMc85Zk3gp7c3CThJdD0spgYzIiid8/SgBWSW8Tj6kyj9tMYRd9uAE3y
bqDKpvBdk/O2aBoAE8+x3U4iDqpHHGhjSjZaaUo4VYI2e5pvkc2jpY2oAUZG
ZCAnZcGYqQMTmsEEI2oO6kRwjOGRoq4QXCdTPdrgPeP0VeTnZQKipn6E8cyh
j8C7iwfBhQY9MHXWHIULdbCxzcDtqI8dIEQwKxvaRF6gWnEwStCCEyQ061cS
lXOQUk3AUQJmJKJCX95HYIqqusZIOgduuU2RRu9vNOul0Y/q5jG+uYWRbVRM
5AWQQHldwDhIWm6QUNmmYPOBaFp0m28bZwxmRLVgIUx/upyCTGoRhh9Me2JU
Ilp9UuXVXAyZb5EAQWFkLcKrDt9FAVjVURVuhCP9woNllgiZU2dDs6b7MsIz
2WzDFxO4LYYVZbc74zfXt0x6m12O/nb3I3ZTnfmIEa2N3I7Myt6g3VPqOEQT
cG9AQM7wOx+jUi9Nc1VN8ct/PrqEv1EaLmWPEz/dfvubpX0H/ycy3739x7//
+z+8az2n/5zVOe3F4xtLq/e+vVWvPqqW7PI+lpyAVOsHdvrXaWusGjdsUSn6
4Bk2CJuuThjE/1RADXMXCLqk/AdLxpo/pN1IWDClzCQutog0ha//HV/90wr1
y/c5emkJ8SiMuEQyAu5/p8dm/Bj4/uSaLDEDMbJL+kIw1bPRLu8a8Qr7nlYY
8i8LcZLtyEVTPP1h39dHmSc+1cxhHc7OzG2QEZCFi9UEnBSaoiejnS/0lnS9
JZql3NQzAJt1UWVTN1Te4ouS3XgXiJN+QFMa69NDRU2EVecUCO6jxjjC6wd2
ire2l3Z7KzQD6CnWU74N3k8xmDJTgwBZm4MUIlu/B+wBqhAH+2y080xvnVSN
/r5aldMtXC4874wKEZphnlAyiDU+NcPnKaChYXop8cM2Lpjf7WVHbz0HLp3z
9/39kJJfZAVHenxyGOt56YG20/v6OAGrVtdVnWwwQHOroumQlmwu6Hv/iF5I
Y/n3+fmR3mH3CFWJ3m7rr38MGp+e++47945uLYKNgoju3AfT9rvfIWkk+tLf
Pd5BOfzut4Hy3/aYrd9Omm+f7egPpS24kjGkdM7kUTAUXvOLcnT+4e3u5c8n
BkEUgIk4+ylIkSecGMDPfcXA9/MhtKEY3FsKfD8kCJNVXcMLaPZIJpLxoBR8
sfPhItojBh4u3iYM9NAvVwQ26ALPrM8iEPrZKAKMHz9OCnDjg+IpbWAdecYZ
YgsffcCcV3JiwHG/8Y4TQ3SVBOS5YbTuLs+F/QIVmnBejHcGiISzU/grQdBs
0tnVEdzhYgxuByJBcaOwpdGKLVnevCM/wCEY33sWuasWHHNg2A+Zi7azU31+
xN6fwK8ktkB9ZvU8hIXoUWqewvcIVvhFTL/F0zflPPHD6FEfPImHlXrPBD9c
2oH3Nni8PgJEOzUNZsnzq7x6Hre8VxW5Vy1ol5IGkpBQVuQzQ2nW1UwlvXP6
uKPgZfZmuD/HCJk7HkGMJNmIoMm+d+VeUdIFIfAshbPk0sIK3dUH7EYDmpr1
+tdyqoMacd4sbxzJpq88JlsueaZfSLRoeAaPKSY23b2OCaOEoeWyrpY17c8+
G715k9LaFk/o0FacMD9j7Ia0Z2ER0YYAZjhiqrOLEiRRNWhjAcvfrTkZuudv
ixPmzcSYqewtYOw2K9e6X2RGutMROy9KWivJhcgb3Idqd7t02UimyLG7irIZ
MDQKXeCOmaIsHxkjDozirJepBKWagKIoM+An5tTg68KROMwq2iCsN/KfZduL
hyX5b96L98Jho+0y2kijSI/bn9yPRF61FJXb3rtzWYnLwslNLu/XfpyG8ccK
Ntm/R4Q56UwBRs7+cHF6ghuEB89Pz9PeMMZ/HJiOqYfCGw5lxQRTJDZ5e8Db
Xvwu8pbCR5LP4fnqWlzheTCgBwjHNO2bkhP6+GvcCOcoiAQyRDF86jAGmpTP
cYwkjvELC2Ocsc3Bh3oH42DKJ4137OotZ0ro7A1+NVsVbF+iVcmZqne49sCy
tgvfDQdAj69KPq+Ku0zw0r78wR2Kcei++FRvARvH+XRqyi1JFwFohok3a1Z8
tvvSlxzi2J/giQeUYXjzVbkpJs8cE9Wp/BK9LTLtTFdRQGtb9NfuFucQK+v5
CWbDmbSf2/MAjE/wEmG73vodU/wdY3TvfQ6/+wg3Ytj60TFi0a0v+/pxUGSP
iGQKu/28L23BjQjT2uM7iP79ZfuPyRQuQEHRaviOQy4hhvDzTWI6hZ7C7XY/
H8iDMP6o6a3fgU0JjGBx/nl4sGn4jsCP5sH7vtMRfoEdmxeABzJ3uc+ShnCn
/zwJ/rO8Em0zycHekMYZOV0uBn726lJL5Jumf0Hgxp+rsFeqN5mzu1sWtx9v
wokxcGfYAuoiAD+JTGKm5/lrUwbj7JIzQ98qQMQ+L4oyIv0ZlwjVM/zks15A
GJ939pSk9gpAbHqQRhqUg9PepQAYn3iui+xNvlgtEv8j7DJs8mBV6sE64p2l
3+QqtnxYJT7sM31AyarBh3UNYuIh2Wt0APV+vMXpmlRbtH0R717E3t+0MpYY
SLAg3Z6XNrCFJ98AiqhgeOAYCoax1JIc1p2R2FZ4ML9oHwYFdGDNZIiPDOUR
Puros2bI1qdePQ/Li3807SFggVLOkj3yS+uOBzEHs8hof1rOb7XTMlU7k9Pz
ahD+ppMaeefdkZ8CxexD0aWT7VNTgO/jZheFfkBURWf/g994lRdGuVNiuPNV
rNxqSs6MJUcH3bl6PP2dVyuLzSvXPLD3QLzi0rFqL5WXzQxvqjh8x5kBbfaT
gyitcUvoDrrGeCbw+WiYtOhR/JQXv0F0DInFQFzqIK9hUpMDThykI7XnCE+S
N+PGEv9cIj4UyglJDMS1gQprG7OZ5dvIbS0NgtYMPS9KGk3bJ8/cdaIwz9Q7
/BLyiDSpc8ud1yfhRvkzEpWROnY7/sEV7zIuCj55ndKKhyFpqpW/kQS7BrqX
Ae4ZCpJZM6fCQQPldyoxRIbPJWEyCf4k6/xWqYtWb7BgLGgudOwErSVm+Hje
YH450MyDj5ZyrE81mUFYK6ht26TJcTc9z+oxHhZO86n7U7olu4fCG2PMRfbH
fknygZ54vYJeiJ5H6zJV1aoZdRQ5udWNLgxu0eK2ORawoBycsilCpG6qumfK
RA5aZ8ow8/H84Pj5keaUx/1DHamKVBPT6YoMhmOboZnNKKOxwU0LEmFSSOv4
GI+KTjOTZY2yGllu8QSQVN1oQiZRFmx8mSCC/eBHYoAnhIV8RxIVYi3EZKQR
7yykG4kYpDHJ5MiSBNaprkmoocIG3+UTdCPVyIH0RK+3pSrdsjiJnuovnIDV
k8BEevbGLA1nkC5JMbDof/IY2KvLwedA2C8loWcfwEp05jlFtmk87DzVAEmk
n0X4Ues8XNM9rvsYUZsWK+tOfHR6/SmCa7KKBx2Lp9otPIMWBCXf0YIchf55
Q3RJQpEL0bXAePslAOFbXRSe7LxJbROLcHyKipIAAAE/Xycgrq7gp4a588ga
o/vg+mOO8rkjabeF+RArindE5QHi0J7XytN0H9JFA2HmmIBUs3N2k+9HUT+h
Phke6eZMcFfYQypMRT6eS14FW9DVpr+ISOOryziGt7W78/Tp6OmWDnHGnzAG
0hfTSZBTJ97zsbGWSLJ6Ai1i5n6xQcYwfSCi20D1tunO4C9hAj38v8cEppG5
MLCPpa0TYLt97iXIFhzXu6Js/ljP++SppAWHkkwVAcMqOmRxOqZaN7eht/ah
l4Mkr0VjYktS5sJ5jVU4qxgnm1BTmAnlEayjwcWaxKfc0Y9wJ/1x6v7ikKfT
6EAua0KCJLipPZbCg12n+fb0Cp8AtaUyKvDoydvgoohpSGJQgpd8ZRfFz7iy
JFERHq6QETvpPYG+EFxTcQQxcNsHXaLAnxDU2uRKAwIqZ+sc9sSkklPrrTAy
rKHnd8uBMylxwf/toY09Q4by686BGPaPQlsRc3DPX04Dtynzgd7bCFbxoRSi
+XjWGlKYzdv8KRVLMUnnxhQfBrexh0pZMwtARw3lDKGzWGPJWqqm4rwwlhOu
HMdNwBKdSMpRVG0lxBUUrek02nx/af8KE6i9wPcn1bj4W+Hji0wlnlg3b5bo
bHS6VRu6fZ/QLUYToA9FYQfO/ul2tGl80NHuF8lur4xSsRNCPYOz7vKOkujS
pnUYxwRzq1alK9slQs9Q8SKq/BQtyAF2F1KMpDcVJVKpdAgudSlWjSJk7HO5
fyIdrWLPC3lVk/9cYn0IzD3Im974f5YQPVDN1coqP9QFBXop+yoO9mScVUX1
baNpGfCOCb3Ah/u8LqgHXKCuwUKgi7zpZJLdyQDlVmN36JHT+WTgFpyITVBH
tYQZvEn9NIGG1pGhU86gw7+F8L2dz3GHnzzu8Cn9+ehwUOKN+xUx0JII7QAB
x9u6fv1X6CjruxrjRlA1RQ39ytx70MBbPSpYkgZvzcZh77ztNff557wYnySl
zkD6nAMu9ShcwcbITviywWPRW5LeSGfbgX1gK+LwJy8nG+Ga/nZCSUA02Cox
mRt34lhZJ+FW365DHZRYyvnbbVwRtmMp9DyNi6rttmMBmE7jmHbvnz6vss9R
Crivz1Fqvc5+mjsOI3ECrzBBxq5Nufcv/6J7fc2PdDsTbzI9+eAo2N3Z7E1+
dO+f/nUpGLj59ZCuErvJ7x+m6e39hLdN7kX83ZzfDcR+POuCe57okx7P3KOC
uzzyqNSGUsftepm+4hvChzj3JaCOjk/ulFAueSkdf35VBt3DqqHPp0+rrqmD
DLyHQvgqAfSwnXyrP592qdoOfYzBpViA3w/yXr2DrVKvvPQwDqsrU50u5Pou
lU3DMvbCxnODzpULfbb0XRYC4OActECgoLtoev6PzoT3ILzdzwjv/yXCi1bB
p8B4SXO/UpT39m00ivsU74iVl1dRSlbOt7vohoOekjIYkhnxM8a/N2GS3Tsw
yXv0k8ayUzPYDmV//GZEa7p6TF+kMm8zfmD7MLnitkA0x0LSIr9RXDJYKG+l
kNuSzXafqKXUqLd9T94SqVRxjuImQu8XpFTdCO6HBSlVoLUTpHzPuLXbZd/S
Hx+3Vq4i+cfFrY/js5H3D7PqnjCr+qAwq+6GWSOK7g6z3mMS1MZw6oYzireE
U9WmcOotUc7N4VTVG07VHxJOVRvDqToKp7ZEZFNYVXU8fSSCUrY+1+/5DMru
B8qovOGHojGGNXxs7FeLwT460jaMI214ku5WIGdT3kcu6O5A8Wy7MptnPusx
TjX3z+DpimrB6aEa1xpVlcsUVdGWteIud5AcRRdhYyvmOvhJA1uagcIGpNUX
2IrgWwtOJl/+hIGtrd2dna9Gu1u3QcvPga1PS/zHvv5rlLqu2DHnP6XUBd/G
qa4epwY11V2hPC6Pe98TbLIPmrnoWyv4r1q3HhyawjRGiXNThXoccRorI4a+
wo4BkSmEl0+kvQD0iJysILjkFXTnNJa6d+EOvbFwh4oKd0QOgy/bESDlX7Ae
QlRcwe3BYiO4YcxtJgc8OtviLapSmCtbOjwR4RSHT/kJk9LJBgo75+3IoQcx
T0dPRnF5CHegISmbkWNSCQ2LxlE6Orjoq38s1PMApGK5lL3jk4O9VJz5UwPf
w6MXR1Qv4DP2/blT3U+q0sAX506go9R2+epT4uUnesvpiAQvs9T9KoAtglEk
NoWjMQCVte8KxXZ2OO9tRhz4+wDj1zK3suI22dvv+JUP6OUDXmmlyerYcnRi
ix/WS2x93Vz12l/Ubu9T6//U7U5xhKhblXtDDWTOUZIi5mSPpT7qIFwu11yZ
fgUmdwEml935dIC+Uuf7rT0z7J2yWkt9fpioriyls1PCOWrAk8/qK1YyG0nR
oap3qPqNF1u7E43R5So2KjV7J93xXUBxVSh3Xx2TatPnfNVcaKx7uP4NhoMk
xP8IPrlfqX1NN3z58+sS4nUNSvW1KHbKzJPZvp33keikt820ZkJKsYtNx1rz
fZcHYOZsnc/nXNKeZO1QbFKdm9d4NPChdaYJL4LqFLPW+ji60Il5BwNh8DgQ
QIOvL1ZYHzevbaOi8twSEu2U6E5NsKuycGGMCkW58fh6+yIuNkwpHpYR2v7x
ueGN1+7eU3Dr6fSqEww8ZLn2Z4ElXLuJ4r6VR3YfOpabWTmdkOu3CxmBTT6B
5l4s4QLvJXyP16HyEe0FWloisud+AHe05x4yTPiZ79YGYw74ouCLt/QF3s8+
/AseSPWaL733AtD665yAgL7J1tEVeHI/Dmb6YyP+sqBw4niAkVZSZ+Hu+emK
xDOf4i3jIKrVlDLkc1oyiwywtisZTbN4lc8adzpeWF5XResO4wG7SK3bsDi6
nhVAtR3K/VNydlmR2MT3P3INOpcpQfUC0nO2MmZEx3KlPTAQQJYLUiUbByQV
csrYh/Rbl3nGiVKZco1KP4Pkht1oryPaS0kbdJf6KjeGVtYCBbeS29uiiYKh
vMivzU1uP3gccaxNUaU8vk9cd0bG145meJfCgG/Dk2PhGRPpyeI6JvF8Sqe4
0PEkHlPina2EN3xhU0yrCDxX1/ieklukusbbB53jeQBr/YZMdB0UuWFYcSW6
5FASRwoshRgl2CepdMnpQDqs7TLmXJIJ3+7gaiW6RZOpVrNpArS7mJlu6cbC
IauiyUpDmzvxRCpudoJRT9S2N1emQIjNKej+vPgiKlKZXOi8rJa4CJRzPulK
rCs8t85L2O10jSgXKeIZng31SepywMdfWOtvv8gayS2km6p7CKgA07taFmmR
l6gUgXdwDnDDCM92DjYd7oTekqex+wIWgP795eWZfianQlWrNst41YTcSrep
duq3A7kKCmt2tXUO5mA93J8hztRXINd4sDI3xbSFJ4wuV4sx5yGBFMJoYF7x
LeXuFifLsk5jKngXEkyGlAVq33wdDE+Hl/JNbqP7zliZ+hOr7iiIP6eswtT6
fIrkthI6R5sytJ2TSgi3TU50SCvknZ2cXvKSwqMMPbIQqwRROlRNgIkfm1kl
dyByOQR/2BpmyM0Z7nQuM2u5IN4DdKHBKjV4K2Jpwda5ghlvH7hv0i9aN0OB
0SWxoM+i+7cGXE60x4W4j83mAih/MWO6FQXnmJr+4puvvwaDjtfUoboPw7Vu
EJN0ECSQeDWLw1WWb4LN2KYgPzt3l+t9uVIFFdxgQ3JhGR9+s0pCaOiXo2ok
8SZNJ7cMweMG68tgpSBypH1xo2WFB0Pwrr59UFT4OxbbEUGb8Onr+FwfXR6a
N1rOjoVIABlBvJERdWUGQKcEDc0Li1wqrLKRTa51Nsccg+R+zbFXfLHaDUsz
ulCQFmI0TFz+cp2gWDIs2uVr+rgikWCKyikeq0ZCDy9fXPClSfDHwuDNqbld
2IGrMatQR/J8YJf0OM+apHRWiwXdTCHnFGXq+T5g0FZZdCbclJbCpuCwzOkp
KqyDFypO2YbhZ4DymlCKBVUHcdld6prccm7pxiDzOsOaX4iQkMQzhIkW3ne5
Vb6SDyop6QkvMq7Rd8jKCcwZW7AsCd44YcAIZ1mVQwDVr3EWBbrQuUO6fHNe
YU/o1YujsHJXefQIa46SNl3h9bMTLGJjynBU372pQOkMm2qIusdz1A17FpBe
dIWYIami3CK+CFa569RoYF7HRrfs1quSWEQ2dFJUq+kQIwVTQbcqL2d1xpem
4qxxWshYrpcDs7DIS2c43ORgxBvxqjStrMHsVniIxAY0k02MQov67q3D5BwG
0NUzCJEWm4hRsWZ9jLoGCxnZger25qNt6AzhNTGkHNijXgD+mJJsU6pM6/QB
xiHp9mOqZ5o+00PjCJFeDsuYFJjqmwk27NgOyfpm0vBrBSI6J957rJuMbIRb
3doC+MwAEVm+AUcHkVJepHLLcWOGRZHgRrQV2drUOnoFz/rh7eH4Unptc+vR
G9KX5JGK54b1AlcgELD+jbvTryUCV3KUzuW3RWN18Q4uAbSJwUG5iGiQQNPF
18RbqR4hrUi35F2QVnOUejp1SmfMGp8CRw3fMSvoKphixuApkEavgs5W1Dvm
YAGMpQ0POX5M8W3Q47RLJQJIepS1G116yCdr7PYko1xAMORyjzvxcNs7X7ik
6CojsWzKgZlt74KybLuqgxHQ49kEIQVOoTPLSFp5j2k+r83c16XBYYVGpboW
gZxD44rfCZdAfRveuCJ9DCIo2lgcJ5TQeUkBtoIv6FV+TzFRrYNYhCMNKtdu
xyJ8fnRw+vLl0cnh0WHPMX9ERMusqBbjvMyH0CdAo2w55M6GMHcz0HGUYE/7
e1VZrOP+TDmp174afjA+DqYQ5eHoLA0bN89kN0SfYntnwQo+egkwdu9s/68v
HgsGocxhmR915twumaKbOlsyTRTXkUYFjbpYVN6k2pb2Ed0xbskrTPdvCCFH
RbvtApse6VdYlZ8xeFYkO5n+OniallLYYqTOkTgiePEiF3lRgabIs2RYfLx/
st+FxHlWZu7mWwcpdYjHYi21dhl+iR54IHwptyR++1heBEgcgxZy5+LwM1nT
JYqwT2WVOxHycBe3O7kRu3Vy3QXC8DN34gMEUTrlu19Tspjih3Kf1EPcIPgH
ve8H9Gf8ek/L1/jdofHnlveA6OSC4HdI27/9W8Kr//gPfOvc3ai+1//9CQii
9Rt0d5Hpr726g17/3E9MeDQlQjgmxQmxyfecLtchD/yRKLM1CWxhkom7qdZd
QJEIh5TdojS8ZG9z9B7juQzxR8tiSD40jig1Vb27Bc6uYgoyp/uSRIvGH1Bk
ISQdTPjqc78R3Ipaj/Qx+T6AgRDnuQoA0KC/ML16k8cpzldNs9RPKIPBszAt
07h5otC3758o/KYzUcRBvhBvIoGVlb/+WhjYYZEHBpqDwNd8/KvigFSaw++v
LfwAYQSdtj9BdFeY6dywL/z2AXiE9h27EOyKWNHpFBGi2c3Ka/37rMTLvS8t
eC4z8CznA/2v6N5eXJliDBDoZXWF9RUANeYDdUZHy8BD0qhuL5rqeqAv84X+
owH/bQ6v7uO1HFYf1fm1pWSUf64A+cDrRYbfQHP59TWGrv6WgQ7ne7RPi2ym
n5t6DmwpnfOS1+xH43InDc1h7te5uSE1jjusYxii+l8OMxFfVJ0AAA==

-->

</rfc>

