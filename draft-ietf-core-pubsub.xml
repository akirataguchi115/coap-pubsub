<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-coap-pubsub-01" category="std">

  <front>
    <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author initials="M.K." surname="Koster" fullname="Michael Koster">
      <organization>SmartThings</organization>
      <address>
        <email>Michael.Koster@smartthings.com</email>
      </address>
    </author>
    <author initials="A.K." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="J.J." surname="Jiménez" fullname="Jaime Jiménez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>

    <date year="2017"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Constrained Application Protocol (CoAP), and related extensions are intended
to support machine-to-machine communication in systems where one or more
nodes are resource constrained, in particular for low power wireless sensor
networks. This document defines a publish-subscribe broker for CoAP that
extends the capabilities of CoAP for supporting nodes with long breaks in
connectivity and/or up-time.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports
machine-to-machine communication across networks of constrained
devices. CoAP uses a request/response model where clients make requests to
servers in order to request actions on resources. Depending on the situation
the same device may act either as a server or a client.</t>

<t>One important class of constrained devices includes devices that are intended
to run for years from a small battery, or by scavenging energy from their
environment. These devices have limited reachability because they spend most
of their time in a sleeping state with no network connectivity. Devices may
also have limited reachability due to certain middle-boxes, such as Network
Address Translators (NATs) or firewalls. Such middle-boxes often prevent
connecting to a device from the Internet unless the connection was initiated
by the device.</t>

<t>This document specifies the means for nodes with limited reachability to
communicate using simple extensions to CoAP. The extensions enable publish-subscribe
communication using a broker node that enables store-and-forward messaging
between two or more nodes. Furthermore the extensions facilitate many-to-many
communication using CoAP.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words ‘MUST’, ‘MUST NOT’, ‘REQUIRED’, ‘SHALL’, ‘SHALL NOT’,
‘SHOULD’, ‘SHOULD NOT’, ‘RECOMMENDED’, ‘MAY’, and ‘OPTIONAL’ in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers
should also be familiar with the terms and concepts discussed in
<xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template
format <xref target="RFC6570"/> is used to describe the REST interfaces defined in
this specification.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Publish-Subscribe (pubsub):'>
  A messaging paradigm where messages are published to a broker and potential
receivers can subscribe to the broker to receive messages. The publishers
do not (need to) know where the message will be eventually sent: the publications
and subscriptions are matched by a broker and publications are delivered
by the broker to subscribed receivers.</t>
  <t hangText='CoAP pubsub service:'>
  A group of REST resources, as defined in this document, which together implement the required features of this specification.</t>
  <t hangText='CoAP pubsub Broker:'>
  A server node capable of receiving messages (publications) from and sending
messages to other nodes, and able to match subscriptions and publications
in order to route messages to the right destinations. The broker can also
temporarily store publications to satisfy future subscriptions and pending notifications.</t>
  <t hangText='CoAP pubsub Client:'>
  A CoAP client which is capable of publish or subscribe operations as defined
in this specification.</t>
  <t hangText='Topic:'>
  A unique identifier for a particular item being published and/or subscribed
to. A broker uses the topics to match subscriptions to publications. A topic
is a valid CoAP URI as defined in <xref target="RFC7252"/></t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<section anchor="coap-pubsub-architecture" title="CoAP pubsub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pubsub service. CoAP pubsub Clients interact
with a CoAP pubsub Broker through the CoAP pubsub REST API which is hosted by
the Broker. State information is updated between the Clients and the Broker.
The CoAP pubsub Broker performs a store-and-forward of state update representations
between certain CoAP pubsub Clients. Clients Subscribe to topics upon which
representations are Published by other Clients, which are forwarded by the
Broker to the subscribing clients. A CoAP pubsub Broker may be used as a
REST resource proxy, retaining the last published representation to supply
in response to Read requests from Clients.</t>

<figure title="CoAP pubsub Architecture" anchor="arch-fig"><artwork align="center"><![CDATA[
Clients        pubsub         Broker
+-------+         |
| CoAP  |         |
|pubsub |---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pubsub |
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pubsub |---------|------+
|Client |         |
+-------+         |

]]></artwork></figure>

</section>
<section anchor="coap-pubsub-broker" title="CoAP pubsub Broker">

<t>A CoAP pubsub Broker is a CoAP Server that exposes a REST API for clients
to use to initiate publish-subscribe interactions. Avoiding the need
for direct reachability between clients, the broker only needs to be
reachable from all clients. The broker also needs to have sufficient
resources (storage, bandwidth, etc.) to host CoAP resource services,
and potentially buffer messages, on behalf of the clients.</t>

</section>
<section anchor="coap-pubsub-client" title="CoAP pubsub Client">

<t>A CoAP pubsub Client interacts with a CoAP pubsub Broker using the CoAP pubsub
REST API defined in this document. Clients initiate interactions with a CoAP pubsub broker. A data source
(e.g., sensor clients) can publish state updates to the broker and data sinks
(e.g., actuator clients) can read from or subscribe to state updates from
the broker. Application clients can make use of both publish and subscribe
in order to exchange state updates with data sources and data sinks.</t>

</section>
<section anchor="coap-pubsub-topic" title="CoAP pubsub Topic">

<t>The clients and broker use topics to identify a particular resource or
object in a publish-subscribe system. Topics are conventionally formed
as a hierarchy, e.g. “/sensors/weather/barometer/pressure” or
“EP-33543/sen/3303/0/5700”.  The topics are hosted at the broker and
all the clients using the broker share the same namespace for
topics. Every CoAP pubsub topic has a link, consisting of a reference
path on the broker using URI path <xref target="RFC3986"/> construction and link
attributes <xref target="RFC6690"/>. Every topic is associated with zero or more
stored representations with a content-format specified in the link. A
CoAP pubsub topic value may alternatively be a collection of one or
more sub-topics, consisting of links to the sub-topic URIs and
indicated by a link-format content-format.</t>

</section>
<section anchor="brokerless-pubsub" title="Brokerless pubsub">

<t><xref target="brokerless"/> shows an arrangement for using CoAP pubsub in a
“brokerless” configuration between peer nodes. Nodes in a brokerless
system may act as both broker and client. The Broker interface in a
brokerless node may be pre-configured with topics that expose services
and resources. Brokerless peer nodes can be mixed with client and
broker nodes in a system with full interoperability.</t>

<figure title="Brokerless pubsub" anchor="brokerless"><artwork align="center"><![CDATA[
  Peer         pubsub          Peer
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pubsub |---------|---------|pubsub |
|Client |         |         |Broker |
+-------+         |         +-------+
| CoAP  |         |         | CoAP  |
|pubsub |---------|---------|pubsub |
|Broker |         |         |Client |
+-------+         |         +-------+

]]></artwork></figure>

</section>
</section>
<section anchor="function-set" title="CoAP pubsub REST API">

<t>This section defines the REST API exposed by a CoAP pubsub Broker to pubsub
Clients.  The examples throughout this section assume the use of CoAP
<xref target="RFC7252"/>. A CoAP pubsub Broker implementing this specification SHOULD
support the DISCOVERY, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ,
and REMOVE operations defined in this section. Optimized implementations 
MAY support a subset of the operations as required by particular constrained 
use cases.</t>

<section anchor="discover" title="DISCOVERY">

<t>CoAP pubsub Clients discover CoAP pubsub Brokers by using CoAP Simple
Discovery or through a Resource Directory (RD)
<xref target="I-D.ietf-core-resource-directory"/>. A CoAP pubsub Broker SHOULD
indicate its presence and availability on a network by exposing a link
to the entry point of its pubsub API at its .well-known/core location <xref target="RFC6690"/>. A CoAP
pubsub broker MAY register its pubsub REST API entry point with a Resource
Directory. <xref target="discover-fig"/> shows an example of a client discovering a
local pubsub API using CoAP Simple Discovery. A broker wishing to
advertise the CoAP pubsub API for Simple Discovery or through a
Resource Directory MUST use the link relation rt=core.ps. A broker MAY
advertise its supported content formats and other attributes in the
link to its pubsub API.</t>

<t>A CoAP pubsub Broker MAY offer a topic discovery entry point to enable Clients
to find topics of interest, either by topic name or by link attributes
which may be registered when the topic is
created. <xref target="discover-topic-fig"/> shows an example of a client looking
for a topic with a resource type (rt) of “temperature” using
Discover. The client then receives the URI of the resource and its
content-format. A pubsub broker wishing to advertize topic discovery
MUST use the relation rt=core.ps.discover in the link.</t>

<t>A CoAP pubsub Broker MAY expose the Discover interface through the
.well-known/core resource. Links to topics may be exposed at
.well-known/core in addition to links to the pubsub
API. <xref target="discover-topic-wk-fig"/> shows an example of topic discovery
through .well-known/core.</t>

<t>The DISCOVER interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  /{+ps}{/topic*}?{q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an application/link-format payload containing
one or more matching entries for the broker resource. A pubsub
broker SHOULD use the value “/ps/” for the base URI of the pubsub
API wherever possible.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for
a unicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<figure title="Example of DISCOVER pubsub function" anchor="discover-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ---->>|
  | -- Content-Format: application/link-format ---|
  |                                               |
  | <<--- 2.05 Content                            |
  | </ps/>;rt=core.ps;rt=core.ps.discover;ct=40 --|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- GET /ps/?rt="temperature" ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

<figure title="Example of DISCOVER topic" anchor="discover-topic-wk-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- GET /.well-known/core?ct=50 ------->>|
  |    Content-Format: application/link-format    |
  |                                               |
  | <<-- 2.05 Content                             |
  |   </ps/currentTemp>;rt="temperature";ct=50 ---|
  |                                               |

]]></artwork></figure>

</section>
<section anchor="create" title="CREATE">

<t>A CoAP pubsub broker MAY allow Clients to create new topics on the 
broker using CREATE. A client wishing
to create a topic MUST use CoAP POST to the pubsub API with a payload
indicating the desired topic. The topic specification sent in the
payload MUST use a supported serialization of the CoRE link format
<xref target="RFC6690"/>. The target of the link MUST be a URI formatted
string. The client MUST indicate the desired content format for
publishes to the topic by using the ct (Content Format) link attribute
in the link-format payload. The client MAY indicate the lifetime of
the topic by including the Max-Age option in the CREATE request.</t>

<t>A Broker MUST return a response code of “2.01 Created” if the topic is
created and return the URI path of the created topic via Location-Path
options. The broker MUST return the appropriate 4.xx response code
indicating the reason for failure if a new topic can not be
created. Broker SHOULD remove topics if the Max-Age of the topic is
exceeded without any publishes to the topic.  Broker SHOULD retain a
topic indefinitely if the Max-Age option is elided or is set to zero
upon topic creation. The lifetime of a topic MUST be refreshed upon
create operations with a target of an existing topic.</t>

<t>Topics may be created as sub-topics of other topics. A client MAY
create a topic with a ct (Content Format) link attribute value which
describes a supported serialization of the CoRE link format
<xref target="RFC6690"/> such as application/link-format (ct=40) or its JSON or
CBOR serializations.  If a topic is created which describes a link
serialization, that topic may then have sub-topics created under it as
shown in <xref target="create-sub-fig"/>.</t>

<t>The CREATE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  /{+ps}{/topic*}?{q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  application/link-format</t>
  <t hangText='Payload:'>
  The desired topic to CREATE</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful Creation of the topic</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.03 “Forbidden”. Topic already exists.</t>
  <t hangText='Failure:'>
  4.06 “Not Acceptable”. Unsupported content format for topic.</t>
</list></t>

<t><xref target="create-fig"/> shows an example of a topic called “topic1” being
successfully created.</t>

<figure title="Example of CREATE topic" anchor="create-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- POST /ps/ "<topic1>;ct=50" -------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |               Location: /ps/topic1            |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE sub-topic" anchor="create-sub-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ------- POST /ps/ "<mainTopic>;ct=40" ------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |             Location: /ps/mainTopic/          |
  |                                               |
  | --- POST /ps/mainTopic/ "<subTopic>;ct=50" -->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |        Location: /ps/mainTopic/subTopic       |
  |                                               |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="publish" title="PUBLISH">

<t>A CoAP pubsub broker MAY allow clients to PUBLISH to topics on
the broker. A client MAY use the PUT or the POST method to publish
state updates to the CoAP pubsub Broker. A client MUST use the content
format specified upon creation of a given topic to publish updates to
that topic. The broker MUST reject publish operations which do not use
the specified content format.  A CoAP client publishing on a topic MAY
indicate the maximum lifetime of the value by including the Max-Age
option in the publish request. The broker MUST return a response code
of “2.04 Changed” if the publish is accepted.  A Broker MAY return a
“4.04 Not Found” if the topic does not exist. A broker MAY return
“4.29 Too Many Requests” if simple flow control as described in
<xref target="sec-flow-control"/> is implemented.</t>

<t>A Broker MUST accept PUBLISH operations using the PUT method. PUBLISH
operations using the PUT method replace any stored representation
associated with the topic, with the supplied representation. A Broker
MAY reject, or delay responses to, PUT requests to a topic while
pending resolution of notifications to subscribers from previous PUT
requests.</t>

<t>Create on PUBLISH: A Broker MAY accept PUBLISH operations to new topics using
the PUT method. If a Broker accepts a PUBLISH using PUT to a topic that does
not exist, the Broker MUST create the topic using the information in the
PUT operation. The Broker MUST create a topic with the URI-Path of the request,
including all of the sub-topics necessary, and create a topic link with the
ct attribute set to the content-format of the payload of the PUT request.
If topic is created, the Broker MUST return the response “2.01 Created” with
the URI of the created topic, including all of the created path segments,
returned via the Location-Path option.</t>

<t>A Broker MAY accept PUBLISH operations using the POST method. If a
broker accepts PUBLISH using POST it shall respond with the 2.04 Changed 
status code.</t>

<t>A Broker MAY perform garbage collection of stored representations
which have been delivered to all subscribers or which have timed
out. A Broker MAY retain at least one most recently published
representation to return in response to SUBSRCIBE and READ requests.</t>

<t>A Broker MUST make a best-effort attempt to notify all clients
subscribed on a particular topic each time it receives a publish on
that topic. An example is shown in <xref target="subscribe-fig"/>. If a client
publishes to a broker with the Max-Age option, the broker MUST include
the same value for the Max-Age option in all notifications. A broker
MUST use CoAP Notification as described in <xref target="RFC7641"/> to notify
subscribed clients.</t>

<t>The PUBLISH interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  PUT, POST</t>
  <t hangText='URI Template:'>
  /{+ps}{/topic*}?{q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  Any valid CoAP content format</t>
  <t hangText='Payload:'>
  Representation of the topic value (CoAP resource state representation) in
the indicated content format</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. Successful publish, topic is created</t>
  <t hangText='Success:'>
  2.04 “Changed”. Successful publish, topic is updated</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.29 “Too Many Requests”. The client should slow down the rate of publish
messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list></t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully
published to the topic “topic1”. See <xref target="subscribe-fig"/> for an example
of a broker forwarding a message from a publishing client to a
subscribed client.</t>

<figure title="Example of PUBLISH" anchor="publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |

]]></artwork></figure>

<figure title="Example of CREATE on PUBLISH" anchor="create-publish-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | -------- PUT /ps/exa/mpl/e "1033.3"  -------> |
  |                                               |
  |                                               |
  | <--------------- 2.01 Created---------------- |
  |             Location: /ps/exa/mpl/e           |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="subscribe" title="SUBSCRIBE">

<t>A CoAP pubsub broker MAY allow Clients to subscribe to topics on the Broker 
using CoAP Observe as described in <xref target="RFC7641"/>. A CoAP pubsub Client wishing 
to Subscribe to a topic on a broker MUST use a CoAP GET with the Observe 
option set to 0 (zero). The Broker MAY add the client to a
list of observers. The Broker MUST return a response code of “2.05 Content”
along with the most recently published value if the topic contains a valid
value and the broker can supply the requested content format. The broker
MUST reject Subscribe requests on a topic if the content format of the request
is not supported by the content format the topic was created with. The broker
MAY accept Subscribe requests which specify content formats that the broker
can supply as alternate content formats to the content format the topic was
registered with. If the topic was published with the Max-Age option, the
broker MUST set the Max-Age option in the valid response to the amount of
time remaining for the value to be valid since the last publish operation
on that topic. The Broker MUST return a response code of “2.07 No Content”
if the Max-Age of the previously stored value has expired. The Broker MUST
return a response code “4.04 Not Found” if the topic does not exist or has
been removed. The Broker MUST return a response code “4.15 Unsupported Content
Format” if it can not return the requested content format. If a Broker is
unable to accept a new Subscription on a topic, it SHOULD return the
appropriate
response code without the Observe option as per as per <xref target="RFC7641"/>
Section 4.1. There is no explicit maximum lifetime of a Subscription,
thus
a Broker may remove subscribers at any time. The Broker, upon removing a
Subscriber, will transmit the appropriate response code without the Observe
option, as per <xref target="RFC7641"/> Section 4.2, to the removed Subscriber.</t>

<t>The SUBSCRIBE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:0</t>
  <t hangText='URI Template:'>
  /{+ps}{/topic*}?{q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful subscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful subscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content format.</t>
</list></t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to “topic1”
and receiving a response from the broker, with a subsequent
notification. The subscribe response from the broker uses the last
stored value associated with the topic1. The notification from the
broker is sent in response to the publish received from Client1.</t>

<figure title="Example of SUBSCRIBE" anchor="subscribe-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                   Subscribe                   |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                    Notify                     |
  |          | <---------- 2.05 Content Observe:11 --------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="unsubscribe" title="UNSUBSCRIBE">

<t>If a CoAP pubsub broker allows clients to SUBSCRIBE to topics on the broker, it MUST allow Clients to unsubscribe from topics on the Broker using the CoAP
Cancel Observation operation. A CoAP pubsub Client wishing to unsubscribe
to a topic on a Broker MUST either use CoAP GET with Observe using an Observe
parameter of 1 or send a CoAP Reset message in response to a publish, as
per <xref target="RFC7641"/>.</t>

<t>The UNSUBSCRIBE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='Options:'>
  Observe:1</t>
  <t hangText='URI Template:'>
  /{+ps}{/topic*}?{q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful unsubscribe, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Successful unsubscribe, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the
Observe=1 cancellation method.</t>

<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig"><artwork align="center"><![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |

]]></artwork></figure>

</section>
<section anchor="read" title="READ">

<t>A CoAP pubsub broker MAY accept Read requests on a topic using the the CoAP
GET method if the content format of the request matches the content format the topic was created with.
The broker MAY accept Read requests which specify content formats that the
broker can supply as alternate content formats to the content format the
topic was registered with. The Broker MUST return a response code of “2.05
Content” along with the most recently published value if the topic contains
a valid value and the broker can supply the requested content format. If
the topic was published with the Max-Age option, the broker MUST set the
Max-Age option in the valid response to the amount of time remaining for
the topic to be valid since the last publish. The Broker MUST return a response
code of “2.07 No Content” if the Max-Age of the previously stored value has
expired. The Broker MUST return a response code “4.04 Not Found” if the topic
does not exist or has been removed. The Broker MUST return a response code
“4.15 Unsupported Content Format” if the broker can not return the requested
content format.</t>

<t>The READ interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  /{+ps}{/topic*}?{q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content”. Successful READ, current value included</t>
  <t hangText='Success:'>
  2.07 “No Content”. Topic exists, value not included</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
  <t hangText='Failure:'>
  4.15 “Unsupported Content Format”. Unsupported content-format.</t>
</list></t>

<t><xref target="read-fig"/> shows an example of a successful READ from topic1,
followed by a Publish on the topic, followed at some time later by a
read of the updated value from the recent Publish.</t>

<figure title="Example of READ" anchor="read-fig"><artwork align="center"><![CDATA[
Client1   Client2                                          Broker
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <---------- 2.05 Content "1007.1"------------ |
  |          |                                               |
  |          |                                               |
  |          |                    Publish                    |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          |                                               |
  |          |                     Read                      |
  |          | --------------- GET /ps/topic1 -------------> |
  |          |                                               |
  |          | <----------- 2.05 Content "1033.3" ---------- |
  |          |                                               |

]]></artwork></figure>

</section>
<section anchor="remove" title="REMOVE">

<t>A CoAP pubsub broker MAY allow clientsremove a topics from the broker
using the CoAP Delete
method on the URI of the topic. The CoAP pubsub Broker MUST return
“2.02 Deleted” if the removal is successful. The broker MUST
return the appropriate 4.xx response code indicating the reason for
failure if the topic can not be removed. When a topic is removed for
any reason, the Broker SHOULD return the response code 4.04 Not Found
and remove all of the observers from the list of observers as per as
per <xref target="RFC7641"/> Section 3.2. If a topic which has sub-topics is
removed, then all of its sub-topics MUST be recursively removed.</t>

<t>The REMOVE interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; Broker</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  /{+ps}{/topic*}?{q*}</t>
  <t hangText='URI Template Variables:'>
  ps := pubsub REST API entry point (optional). The entry point of the pubsub REST API, as obtained from discovery, used to discover topics.</t>
  <t>topic := The desired topic to return links for (optional).</t>
  <t>q := Query Filter (optional). MAY contain a query filter list as per
 <xref target="RFC6690"/> Section 4.1.</t>
  <t hangText='Content-Format:'>
  None</t>
  <t hangText='Response Payload:'>
  None</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted”. Successful remove</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.01 “Unauthorized”. Authorization failure.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Topic does not exist.</t>
</list></t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.</t>

<figure title="Example of REMOVE" anchor="remove-fig"><artwork align="center"><![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |

]]></artwork></figure>

</section>
</section>
<section anchor="coap-pubsub-operation-with-resource-directory" title="CoAP pubsub Operation with Resource Directory">

<t>A CoAP pubsub Broker may register the base URI, which is the REST API entry point for a pubsub service, with a Resource
Directory. A pubsub Client may use an RD to discover a pubsub Broker.</t>

<t>A CoAP pubsub Client may register links <xref target="RFC6690"/> with a Resource
Directory to enable discovery of created pubsub topics. A pubsub
Client may use an RD to discover pubsub Topics. A client which
registers pubsub Topics with an RD MUST use the context relation (con)
<xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of
the registered links is the pubsub Broker.</t>

<t>A CoAP pubsub Broker may alternatively register links to its topics to
a Resource Directory by triggering the RD to retrieve it’s links from
.well-known/core.  In order to use this method, the links must first
be exposed in the .well-known/core of the pubsub broker. See
<xref target="discover"/> in this document.</t>

<t>The pubsub broker triggers the RD to retrieve its links by sending a
POST with an empty payload to the .well-known/core of the Resource
Directory.  The RD server will then retrieve the links from the
.well-known/core of the pubsub broker and incorporate them into the
Resource Directory. See <xref target="I-D.ietf-core-resource-directory"/> for
further details.</t>

</section>
<section anchor="sleep-wake-operation" title="Sleep-Wake Operation">

<t>CoAP pubsub provides a way for client nodes to sleep between operations,
conserving energy during idle periods. This is made possible by shifting
the server role to the broker, allowing the broker to be always-on and respond
to requests from other clients while a particular client is sleeping.</t>

<t>For example, the broker will retain the last state update received from a
sleeping client, in order to supply the most recent state update to other
clients in response to read and subscribe operations.</t>

<t>Likewise, the broker will retain the last state update received on the topic
such that a sleeping client, upon waking, can perform a read operation to
the broker to update its own state from the most recent system state update.</t>

</section>
<section anchor="sec-flow-control" title="Simple Flow Control">

<t>Since the broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time.</t>

<t>If the broker is unable to serve a certain client that is sending
publish messages too fast, the broker MUST respond with Response Code
4.29, “Too Many Requests”. This Response Code is like HTTP 429 “Too
Many Requests” but uses the Max-Age Option in place of the
“Retry-After” header field to indicate the number of seconds after
which to retry. The broker MAY stop creating notifications from the
publish messages from this client and to this topic for the indicated
time.</t>

<t>If a client receives the 4.29 Response Code from the broker for a
publish message to a topic, it MUST NOT send new publish messages to
the broker on the same topic before the time indicated in Max-Age has
passed.</t>

</section>
<section anchor="SecurityConsiderations" title="Security Considerations">

<t>CoAP pubsub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory
<xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and
therefore the security considerations of those documents also apply to
this specification. Additionally, a CoAP pubsub broker and the clients
SHOULD authenticate each other and enforce access control policies. A
malicious client could subscribe to data it is not authorized to or
mount a denial of service attack against the broker by publishing a
large number of resources.  The authentication can be performed using
the already standardized DTLS offered mechanisms, such as
certificates. DTLS also allows communication security to be
established to ensure integrity and confidentiality protection of the
data exchanged between these relevant parties. Provisioning the
necessary credentials, trust anchors and authorization policies is
non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pubsub broker introduces challenges for the use of
end-to-end security between for example a client device on a sensor
network and a client application running in a cloud-based server
infrastructure since brokers terminate the exchange. While running
separate DTLS sessions from the client device to the broker and from
broker to client application protects confidentially on those paths,
the client device does not know whether the commands coming from the
broker are actually coming from the client application. Similarly, a
client application requesting data does not know whether the data
originated on the client device. For scenarios where end-to-end
security is desirable the use of application layer security is
unavoidable. Application layer security would then provide a guarantee
to the client device that any request originated at the client
application. Similarly, integrity protected sensor data from a client
device will also provide guarantee to the client application that the
data originated on the client device itself. The protected data can
also be verified by the intermediate broker ensuring that it
stores/caches correct request/response and no malicious
messages/requests are accepted. The broker would still be able to
perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in
the CoAP pubsub broker, the use of end-to-end object security is
RECOMMENDED as described in <xref target="I-D.palombini-ace-coap-pubsub-profile"/>.</t>

<t>When only end-to-end encryption is necessary and the CoAP Broker is
trusted, Payload Only Protection (Mode:PAYL) could be used. The
Publisher would wrap only the payload before sending it to the broker
and set the option Content-Format to application/smpayl. Upon
receival, the Broker can read the unencrypted CoAP header to forward
it to the subscribers.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document registers one attribute value in the Resource Type (rt=) registry
established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters
Registry.</t>

<section anchor="resource-type-value-coreps" title="Resource Type value ‘core.ps’">

<t><list style="symbols">
  <t>Attribute Value: core.ps</t>
  <t>Description: <xref target="function-set"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="resource-type-value-corepsdiscover" title="Resource Type value ‘core.ps.discover’">

<t><list style="symbols">
  <t>Attribute Value: core.ps.discover</t>
  <t>Description: <xref target="function-set"/> of [[This document]]</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
<section anchor="response-code-value-207" title="Response Code value ‘2.07’">

<t><list style="symbols">
  <t>Response Code: 2.07</t>
  <t>Description: Add No Content response to GET to the existing definition of
the 2.07 response code.</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: The server sends this code to the client to indicate that the request was valid and accepted, but the responce may contain an empty payload. It is comparable to and may be proxied with the http 204 No Content status code.</t>
</list></t>

</section>
<section anchor="response-code-value-429" title="Response Code value ‘4.29’">

<t><list style="symbols">
  <t>Response Code: 4.29</t>
  <t>Description: This error code is used by a server to indicate that a client
is making too many requests on a resource.</t>
  <t>Reference: [[This document]]</t>
  <t>Notes: None</t>
</list></t>

</section>
</section>
<section anchor="acks" title="Acknowledgements">

<t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi,
Peter van der Stok, Tim Kellogg, Anders Eriksson, Goran Selander, Mikko Majanen,
and Olaf Bergmann for their contributions and reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='http://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC6690" target='http://www.rfc-editor.org/info/rfc6690'>
<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type.  &quot;RESTful&quot; refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6690'/>
<seriesInfo name='DOI' value='10.17487/RFC6690'/>
</reference>



<reference  anchor="RFC6570" target='http://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7641" target='http://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="RFC7252" target='http://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.selander-ace-object-security">
<front>
<title>Object Security of CoAP (OSCOAP)</title>

<author initials='G' surname='Selander' fullname='Goeran Selander'>
    <organization />
</author>

<author initials='J' surname='Mattsson' fullname='John Mattsson'>
    <organization />
</author>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<author initials='L' surname='Seitz' fullname='Ludwig Seitz'>
    <organization />
</author>

<date month='October' day='11' year='2016' />

<abstract><t>This memo defines Object Security of CoAP (OSCOAP), a method for application layer protection of message exchanges with the Constrained Application Protocol (CoAP), using the CBOR Object Signing and Encryption (COSE) format.  OSCOAP provides end-to-end encryption, integrity and replay protection to CoAP payload, options, and header fields, as well as a secure binding between CoAP request and response messages.  The use of OSCOAP is signaled with the CoAP option Object-Security, also defined in this memo.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-selander-ace-object-security-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-selander-ace-object-security-06.txt' />
</reference>



<reference anchor="I-D.palombini-ace-coap-pubsub-profile">
<front>
<title>CoAP Pub-Sub Profile for Authentication and Authorization for Constrained Environments (ACE)</title>

<author initials='F' surname='Palombini' fullname='Francesca Palombini'>
    <organization />
</author>

<date month='March' day='13' year='2017' />

<abstract><t>This specification defines a profile for authentication and authorization for publishers and subscribers in a pub-sub setting scenario in a constrained environment, using the ACE framework.  This profile relies on transport layer or application layer security to authorize the publisher to the broker.  Moreover, it relies on application layer security for publisher-broker and subscriber-broker communication.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-palombini-ace-coap-pubsub-profile-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-palombini-ace-coap-pubsub-profile-00.txt' />
</reference>



<reference anchor="I-D.ietf-core-resource-directory">
<front>
<title>CoRE Resource Directory</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='P' surname='Stok' fullname='Peter Van der Stok'>
    <organization />
</author>

<date month='March' day='13' year='2017' />

<abstract><t>In many M2M applications, direct discovery of resources is not practical due to sleeping nodes, disperse networks, or networks where multicast traffic is inefficient.  These problems can be solved by employing an entity called a Resource Directory (RD), which hosts descriptions of resources held on other servers, allowing lookups to be performed for those resources.  This document specifies the web interfaces that a Resource Directory supports in order for web servers to discover the RD and to register, maintain, lookup and remove resource descriptions.  Furthermore, new link attributes useful in conjunction with an RD are defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-resource-directory-10' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-resource-directory-10.txt' />
</reference>



<reference  anchor="RFC5988" target='http://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAD7NWlkAA+1d63YbOXL+j6fAkX/YzpKUZHtu2p1JZEmT1a4taSV5N5vL
yWmSINWrZje30bTM8Tjvk+fIi6VuuHU3JfmSueRYZ85YIruBQqFQ9VWhUBgO
h8o2WTn9z6yoSrOnm3plVL6s6TfbPNnZ+WbniZpWkzJbwNfTOps1w9w0s+Gk
qg38L1sOl6uxXY2HO7tqkjV72jZTtcz3lNZNNdnTD9fGPuQ/qsUymzTJR1Oz
bK7gk6fyd15OTRk9YteL2sxs9EFVN+kn0OwC3ok+ycsix8H4d5o6p37LSl4Q
OvhvID79qMmbAl4/W42L3F4NL2B8kzofG/28rq5NrWdVrZsrow+qEprOoK+p
3l8uixzGn1elPqsrHG2hHx1U+2ePVTYe1+b1HQ3io+r6Zk8fl42pS9MMD5HZ
apo1QMuTnd2vVLZqrqp6Tw1hhDDclyP9R/ivsvA8DINn6GU+ucpMET6u6vme
vlhkdXN5lZdzCx+ZRZYX/tERP/pPFp9p6JkR8MP1ss+9mDorTem72a/z6DPq
4wiYbG1Vhg6yOh9d80P/ZOTbuOk/jOi/fPE//12aH3zbf8jyhYk/3tD83/C5
0d/gf/BY2kFZ1QuYi9cGxfD8+4On33z9pfz6ZHf3G/n1yy+/2XG/fvGV+/Wr
L5/tul+ffPFkT+XlLG7ueHg4sqaARWPqYTYxw2r8NzNphtZMVnXerN0zS1hS
i3Fe5vRQvFKWdTXLC99YWE61sdWqhqeneQ1NVvVaCPnim6+/3lNqOBzqbIwy
N2mUury/CA40kKtroLqBB82bxpQWHrMwRQbmAv6cmqlqKlgLyyWsML3IJiAJ
ZthUQ/mV1tmqdB3kJaxNkJuF1TdXBloB9QETpRcwDmD/1HDbbkTwtid0gC8v
QdjyyarIWPqL6kYvqxtYCzcw9MJYqy3QWNUKVsJNVV/bkQb5tRpU0QqXu56a
GTQGveilLCvrl9U4XVawWLNG0ainllbuJFtm47zImxxaqGb8FD4u44dFoHkQ
N3lzBdTB37CGs2sLtCsYSwnTk7+G2UbGbsOLq+WwQXHkSVrk02lhlHqAq7mu
pqsJMe3tgzz68917TaF++1Yk8t07R6ZVd85TNqkrYKbjIg42mgo1Na/ziQHm
EgdWlhham7+vjG22YfKW8KyBSZ2CSuF5nhQ5aluQkGvjngSmVsqa+rWpkUEg
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

-->

</rfc>

